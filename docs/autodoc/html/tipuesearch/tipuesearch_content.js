var tipuesearch = {"pages": [
     {"title": "introduction", "text": "   This is the documentation of the pasdoc sources, intended for pasdoc developers. For user's documentation see [https://pasdoc.github.io/].  Contents:  Parsing  Storing  Generators  Notes     General overview of the data flow in pasdoc:  Parsing   TTokenizer reads the source file, and converts it to a series of TTokens.  TScanner uses an underlying TTokenizer and also returns a series of TTokens, but in addition it understands and interprets $define, $ifdef and similar compiler directives. While TTokenizer simply returns all tokens, TScanner returns only those tokens that are not &quot;$ifdefed out&quot;. E.g. if WIN32 is not defined then the TScanner returns only tokens &quot;const LineEnding = #10;&quot; for the following code:   const LineEnding = {$ifdef WIN32} #13#10 {$else} #10 {$endif};    Finally TParser uses an underlying TScanner and interprets the series of tokens, as e.g. &quot;here I see a declaration of variable Foo, of type Integer&quot;. The Parser stores everything it reads in a TPasUnit instance.  If you ever wrote a program that interprets a text language, you will see that there is nothing special here: We have a lexer (TScanner, a simplified lexer in TTokenizer) and a parser (TParser).  It is important to note that pasdoc's parser is somewhat unusual, compared to &quot;normal&quot; parsers that are used e.g. in Pascal compilers.        Pasdoc's parser does not read the implementation section of a unit file (although this may change some day, see [https://github.com/pasdoc/pasdoc/wiki/WantedFeaturesParsingImplementation]).    Pasdoc's parser is &quot;cheating&quot;: It does not really understand everything it reads. E.g. the parameter section of a procedure declaration is parsed &quot;blindly&quot;, by simply reading tokens up to a matching closing parenthesis. Such cheating obviously simplifies the parser implementation, but it also makes pasdoc's parser &quot;dumber&quot;, see [https://github.com/pasdoc/pasdoc/wiki/ToDoParser].    Pasdoc's parser collects the comments before each declaration, since these comments must be converted and placed in the final documentation (while &quot;normal&quot; parsers usually treat comments as a meaningless white-space).     Storing   The unit PasDoc_Items provides a comfortable class hierarchy to store a parsed Pascal source tree. TPasUnit is a &quot;root class&quot; (container-wise), it contains references to all other items within a unit, every item is some instance of TPasItem.  Generators   The last link in the chain are the generators. A generator uses the stored TPasItem tree and generates the final documentation. The base abstract class for a generator is TDocGenerator, this provides some general mechanisms used by all generators. From TDocGenerator descend more specialized generator classes, like TGenericHTMLDocGenerator, THTMLDocGenerator, TTexDocGenerator and others.  Notes   Note that the parser and the generators do not communicate with each other directly. The parser stores things in the TPasItem tree. Generators read and process the TPasItem tree.  So the parser cannot do any stupid thing like messing with some HTML-specific or LaTeX-specific issues of generating documentation. And the generator cannot deal with parsing Pascal source code.  Actually, this makes the implementation of the generator independent enough to be used in other cases, e.g. to generate an &quot;introduction&quot; file for the final documentation, like the one you are reading right now.  Pasdoc Sources Overview", "tags": "", "url": "introduction.html"},
     {"title": "PasDoc_Aspell", "text": "   ", "tags": "", "url": "PasDoc_Aspell.html"},
     {"title": "PasDoc_Aspell.TSpellingError", "text": "   ", "tags": "", "url": "PasDoc_Aspell.TSpellingError.html"},
     {"title": "PasDoc_Aspell.TSpellingError.Word", "text": "   ", "tags": "", "url": "PasDoc_Aspell.TSpellingError.html#Word"},
     {"title": "PasDoc_Aspell.TSpellingError.Offset", "text": "   ", "tags": "", "url": "PasDoc_Aspell.TSpellingError.html#Offset"},
     {"title": "PasDoc_Aspell.TSpellingError.Suggestions", "text": "   ", "tags": "", "url": "PasDoc_Aspell.TSpellingError.html#Suggestions"},
     {"title": "PasDoc_Aspell.TAspellProcess", "text": " It uses underlying TProcessLineTalk to execute and &quot;talk&quot; with aspell.   ", "tags": "", "url": "PasDoc_Aspell.TAspellProcess.html"},
     {"title": "PasDoc_Aspell.TAspellProcess.Create", "text": " Values for AspellMode and AspellLanguage are the same as for aspell --mode and --lang command-line options. You can pass here '', then we will not pass appropriate command-line option to aspell.    ", "tags": "", "url": "PasDoc_Aspell.TAspellProcess.html#Create"},
     {"title": "PasDoc_Aspell.TAspellProcess.Destroy", "text": "    ", "tags": "", "url": "PasDoc_Aspell.TAspellProcess.html#Destroy"},
     {"title": "PasDoc_Aspell.TAspellProcess.SetIgnoreWords", "text": "    ", "tags": "", "url": "PasDoc_Aspell.TAspellProcess.html#SetIgnoreWords"},
     {"title": "PasDoc_Aspell.TAspellProcess.CheckString", "text": " Will create an array of TSpellingError objects, one entry for each misspelled word. Offsets of TSpellingErrors will be relative to AString.    ", "tags": "", "url": "PasDoc_Aspell.TAspellProcess.html#CheckString"},
     {"title": "PasDoc_Aspell.TAspellProcess.AspellMode", "text": "   ", "tags": "", "url": "PasDoc_Aspell.TAspellProcess.html#AspellMode"},
     {"title": "PasDoc_Aspell.TAspellProcess.AspellLanguage", "text": "   ", "tags": "", "url": "PasDoc_Aspell.TAspellProcess.html#AspellLanguage"},
     {"title": "PasDoc_Aspell.TAspellProcess.OnMessage", "text": "   ", "tags": "", "url": "PasDoc_Aspell.TAspellProcess.html#OnMessage"},
     {"title": "PasDoc_Base", "text": "           Unit name must be PasDoc_Base instead of just PasDoc to not conflict with the name of base program name pasdoc.dpr. Johannes Berg  Ralf Junker (delphi@zeitungsjunge.de) Erwin Scheuch-Heilig (ScheuchHeilig@t-online.de) Marco Schmidt (marcoschmidt@geocities.com) Michael van Canneyt (michael@tfdec1.fys.kuleuven.ac.be) Michalis Kamburelis Richard B. Winston  Arno Garrels   Johannes Berg  Ralf Junker (delphi@zeitungsjunge.de) Erwin Scheuch-Heilig (ScheuchHeilig@t-online.de) Marco Schmidt (marcoschmidt@geocities.com) Michael van Canneyt (michael@tfdec1.fys.kuleuven.ac.be) Michalis Kamburelis Richard B. Winston  Arno Garrels   Johannes Berg  Ralf Junker (delphi@zeitungsjunge.de) Erwin Scheuch-Heilig (ScheuchHeilig@t-online.de) Marco Schmidt (marcoschmidt@geocities.com) Michael van Canneyt (michael@tfdec1.fys.kuleuven.ac.be) Michalis Kamburelis Richard B. Winston  Arno Garrels  ", "tags": "", "url": "PasDoc_Base.html"},
     {"title": "PasDoc_Base.TPasDoc", "text": " All parsed units are then given to documentation generator, which creates one or more documentation output files.   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html"},
     {"title": "PasDoc_Base.TPasDoc.RemoveExcludedItems", "text": " If one is found, the item is removed from the collection. If not, the fields, methods and properties collections are called with RemoveExcludedItems If the collection is empty after removal of all items, it is disposed of and the variable is set to nil.    ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#RemoveExcludedItems"},
     {"title": "PasDoc_Base.TPasDoc.Notification", "text": "    ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#Notification"},
     {"title": "PasDoc_Base.TPasDoc.Create", "text": "    ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#Create"},
     {"title": "PasDoc_Base.TPasDoc.Destroy", "text": "    ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#Destroy"},
     {"title": "PasDoc_Base.TPasDoc.AddSourceFileNames", "text": "    ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#AddSourceFileNames"},
     {"title": "PasDoc_Base.TPasDoc.AddSourceFileNamesFromFile", "text": " Adds all file names to SourceFileNames. If DashMeansStdin and AFileName = '-' then it will load filenames from stdin.    ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#AddSourceFileNamesFromFile"},
     {"title": "PasDoc_Base.TPasDoc.DoError", "text": "    ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#DoError"},
     {"title": "PasDoc_Base.TPasDoc.DoMessage", "text": "    ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#DoMessage"},
     {"title": "PasDoc_Base.TPasDoc.GenMessage", "text": "    ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#GenMessage"},
     {"title": "PasDoc_Base.TPasDoc.Execute", "text": "    ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#Execute"},
     {"title": "PasDoc_Base.TPasDoc.Units", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#Units"},
     {"title": "PasDoc_Base.TPasDoc.Conclusion", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#Conclusion"},
     {"title": "PasDoc_Base.TPasDoc.Introduction", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#Introduction"},
     {"title": "PasDoc_Base.TPasDoc.AdditionalFiles", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#AdditionalFiles"},
     {"title": "PasDoc_Base.TPasDoc.DescriptionFileNames", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#DescriptionFileNames"},
     {"title": "PasDoc_Base.TPasDoc.Directives", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#Directives"},
     {"title": "PasDoc_Base.TPasDoc.IncludeDirectories", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#IncludeDirectories"},
     {"title": "PasDoc_Base.TPasDoc.OnWarning", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#OnWarning"},
     {"title": "PasDoc_Base.TPasDoc.OnMessage", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#OnMessage"},
     {"title": "PasDoc_Base.TPasDoc.ProjectName", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#ProjectName"},
     {"title": "PasDoc_Base.TPasDoc.SourceFileNames", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#SourceFileNames"},
     {"title": "PasDoc_Base.TPasDoc.Title", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#Title"},
     {"title": "PasDoc_Base.TPasDoc.Verbosity", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#Verbosity"},
     {"title": "PasDoc_Base.TPasDoc.StarOnly", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#StarOnly"},
     {"title": "PasDoc_Base.TPasDoc.CommentMarkers", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#CommentMarkers"},
     {"title": "PasDoc_Base.TPasDoc.IgnoreMarkers", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#IgnoreMarkers"},
     {"title": "PasDoc_Base.TPasDoc.MarkerOptional", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#MarkerOptional"},
     {"title": "PasDoc_Base.TPasDoc.IgnoreLeading", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#IgnoreLeading"},
     {"title": "PasDoc_Base.TPasDoc.Generator", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#Generator"},
     {"title": "PasDoc_Base.TPasDoc.ShowVisibilities", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#ShowVisibilities"},
     {"title": "PasDoc_Base.TPasDoc.CacheDir", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#CacheDir"},
     {"title": "PasDoc_Base.TPasDoc.SortSettings", "text": " See [https://github.com/pasdoc/pasdoc/wiki/SortOption].   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#SortSettings"},
     {"title": "PasDoc_Base.TPasDoc.IntroductionFileName", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#IntroductionFileName"},
     {"title": "PasDoc_Base.TPasDoc.ConclusionFileName", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#ConclusionFileName"},
     {"title": "PasDoc_Base.TPasDoc.AdditionalFilesNames", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#AdditionalFilesNames"},
     {"title": "PasDoc_Base.TPasDoc.ImplicitVisibility", "text": " This will be passed to parser instance.   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#ImplicitVisibility"},
     {"title": "PasDoc_Base.TPasDoc.HandleMacros", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#HandleMacros"},
     {"title": "PasDoc_Base.TPasDoc.AutoLink", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#AutoLink"},
     {"title": "PasDoc_Base.TPasDoc.AutoBackComments", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#AutoBackComments"},
     {"title": "PasDoc_Base.TPasDoc.InfoMergeType", "text": "   ", "tags": "", "url": "PasDoc_Base.TPasDoc.html#InfoMergeType"},
     {"title": "PasDoc_Base.DEFAULT_VERBOSITY_LEVEL", "text": "   ", "tags": "", "url": "PasDoc_Base.html#DEFAULT_VERBOSITY_LEVEL"},
     {"title": "PasDoc_Gen", "text": "               PasDoc_Gen contains the basic documentation generator object TDocGenerator. It is not sufficient by itself but the basis for all generators that produce documentation in a specific format like HTML or LaTex. They override TDocGenerator's virtual methods. Johannes Berg  Ralf Junker (delphi@zeitungsjunge.de) Ivan Montes Velencoso (senbei@teleline.es) Marco Schmidt (marcoschmidt@geocities.com) Philippe Jean Dit Bailleul (jdb@abacom.com) Rodrigo Urubatan Ferreira Jardim (rodrigo@netscape.net) Grzegorz Skoczylas  Pierre Woestyn  Michalis Kamburelis Richard B. Winston  Ascanio Pressato Arno Garrels   Johannes Berg  Ralf Junker (delphi@zeitungsjunge.de) Ivan Montes Velencoso (senbei@teleline.es) Marco Schmidt (marcoschmidt@geocities.com) Philippe Jean Dit Bailleul (jdb@abacom.com) Rodrigo Urubatan Ferreira Jardim (rodrigo@netscape.net) Grzegorz Skoczylas  Pierre Woestyn  Michalis Kamburelis Richard B. Winston  Ascanio Pressato Arno Garrels   Johannes Berg  Ralf Junker (delphi@zeitungsjunge.de) Ivan Montes Velencoso (senbei@teleline.es) Marco Schmidt (marcoschmidt@geocities.com) Philippe Jean Dit Bailleul (jdb@abacom.com) Rodrigo Urubatan Ferreira Jardim (rodrigo@netscape.net) Grzegorz Skoczylas  Pierre Woestyn  Michalis Kamburelis Richard B. Winston  Ascanio Pressato Arno Garrels  ", "tags": "", "url": "PasDoc_Gen.html"},
     {"title": "PasDoc_Gen.TOverviewFileInfo", "text": "   ", "tags": "", "url": "PasDoc_Gen.TOverviewFileInfo.html"},
     {"title": "PasDoc_Gen.TOverviewFileInfo.BaseFileName", "text": "   ", "tags": "", "url": "PasDoc_Gen.TOverviewFileInfo.html#BaseFileName"},
     {"title": "PasDoc_Gen.TOverviewFileInfo.TranslationId", "text": "   ", "tags": "", "url": "PasDoc_Gen.TOverviewFileInfo.html#TranslationId"},
     {"title": "PasDoc_Gen.TOverviewFileInfo.TranslationHeadlineId", "text": "   ", "tags": "", "url": "PasDoc_Gen.TOverviewFileInfo.html#TranslationHeadlineId"},
     {"title": "PasDoc_Gen.TOverviewFileInfo.NoItemsTranslationId", "text": "   ", "tags": "", "url": "PasDoc_Gen.TOverviewFileInfo.html#NoItemsTranslationId"},
     {"title": "PasDoc_Gen.TListItemData", "text": "   ", "tags": "", "url": "PasDoc_Gen.TListItemData.html"},
     {"title": "PasDoc_Gen.TListItemData.Create", "text": "    ", "tags": "", "url": "PasDoc_Gen.TListItemData.html#Create"},
     {"title": "PasDoc_Gen.TListItemData.ItemLabel", "text": " Already in the processed form. For other lists this will always be ''.   ", "tags": "", "url": "PasDoc_Gen.TListItemData.html#ItemLabel"},
     {"title": "PasDoc_Gen.TListItemData.Text", "text": " Already in the processed form, after TDocGenerator.ConvertString etc. Ready to be included in final documentation.   ", "tags": "", "url": "PasDoc_Gen.TListItemData.html#Text"},
     {"title": "PasDoc_Gen.TListItemData.Index", "text": " This should be used for @orderedList. When you iterate over TListData.Items, you should be aware that Index of list item is not necessarily equal to the position of item inside TListData.Items. That's because of @itemSetNumber tag.  Normal list numbering (when no @itemSetNumber tag was used) starts from 1. Using @itemSetNumber user is able to change following item's Index.  For unordered and definition lists this is simpler: Index is always equal to the position within TListData.Items (because @itemSetNumber is not allowed there). And usually you will just ignore Index of items on unordered and definition lists.   ", "tags": "", "url": "PasDoc_Gen.TListItemData.html#Index"},
     {"title": "PasDoc_Gen.TListData", "text": " Passed to TDocGenerator.FormatList. Every item of this list should be non-nil instance of TListItemData.   ", "tags": "", "url": "PasDoc_Gen.TListData.html"},
     {"title": "PasDoc_Gen.TListData.Create", "text": "    ", "tags": "", "url": "PasDoc_Gen.TListData.html#Create"},
     {"title": "PasDoc_Gen.TListData.ItemSpacing", "text": "   ", "tags": "", "url": "PasDoc_Gen.TListData.html#ItemSpacing"},
     {"title": "PasDoc_Gen.TListData.ListType", "text": "   ", "tags": "", "url": "PasDoc_Gen.TListData.html#ListType"},
     {"title": "PasDoc_Gen.TRowData", "text": "   ", "tags": "", "url": "PasDoc_Gen.TRowData.html"},
     {"title": "PasDoc_Gen.TRowData.Head", "text": "   ", "tags": "", "url": "PasDoc_Gen.TRowData.html#Head"},
     {"title": "PasDoc_Gen.TRowData.Cells", "text": "   ", "tags": "", "url": "PasDoc_Gen.TRowData.html#Cells"},
     {"title": "PasDoc_Gen.TRowData.Create", "text": "    ", "tags": "", "url": "PasDoc_Gen.TRowData.html#Create"},
     {"title": "PasDoc_Gen.TRowData.Destroy", "text": "    ", "tags": "", "url": "PasDoc_Gen.TRowData.html#Destroy"},
     {"title": "PasDoc_Gen.TTableData", "text": " Passed to TDocGenerator.FormatTable. Every item of this list should be non-nil instance of TRowData.   ", "tags": "", "url": "PasDoc_Gen.TTableData.html"},
     {"title": "PasDoc_Gen.TTableData.MaxCellCount", "text": "   ", "tags": "", "url": "PasDoc_Gen.TTableData.html#MaxCellCount"},
     {"title": "PasDoc_Gen.TTableData.MinCellCount", "text": "   ", "tags": "", "url": "PasDoc_Gen.TTableData.html#MinCellCount"},
     {"title": "PasDoc_Gen.TDocGenerator", "text": " This abstract object will do the complete process of writing documentation files. It will be given the collection of units that was the result of the parsing process and a configuration object that was created from default values and program parameters. Depending on the output format, one or more files may be created (HTML will create several, Tex only one).   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html"},
     {"title": "PasDoc_Gen.TDocGenerator.FLanguage", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FLanguage"},
     {"title": "PasDoc_Gen.TDocGenerator.FClassHierarchy", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FClassHierarchy"},
     {"title": "PasDoc_Gen.TDocGenerator.FUnits", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FUnits"},
     {"title": "PasDoc_Gen.TDocGenerator.DoError", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#DoError"},
     {"title": "PasDoc_Gen.TDocGenerator.DoMessage", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#DoMessage"},
     {"title": "PasDoc_Gen.TDocGenerator.CreateClassHierarchy", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#CreateClassHierarchy"},
     {"title": "PasDoc_Gen.TDocGenerator.MakeItemLink", "text": " Returned string may be directly inserted inside output documentation. LinkCaption will be always converted using ConvertString before writing, so don't worry about doing this yourself when calling this method.  LinkContext may be used in some descendants to present the link differently, see TLinkContext for it's meaning.  If some output format doesn't support this feature, it can return simply ConvertString(LinkCaption). This is the default implementation of this method in this class.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#MakeItemLink"},
     {"title": "PasDoc_Gen.TDocGenerator.WriteCodeWithLinksCommon", "text": " Links inside the code are resolved from Item. If WriteItemLink then Item.Name is made a link. Item.Name is printed between NameLinkBegin and NameLinkEnd.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#WriteCodeWithLinksCommon"},
     {"title": "PasDoc_Gen.TDocGenerator.CloseStream", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#CloseStream"},
     {"title": "PasDoc_Gen.TDocGenerator.CodeString", "text": "    s is the string to format s is the string to format the formatted string", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#CodeString"},
     {"title": "PasDoc_Gen.TDocGenerator.ConvertString", "text": "  The @ character should not be converted, this will be done later on.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#ConvertString"},
     {"title": "PasDoc_Gen.TDocGenerator.ConvertChar", "text": " This method should always be called to add characters to a string.  @ should also be converted by this routine.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#ConvertChar"},
     {"title": "PasDoc_Gen.TDocGenerator.CreateLink", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#CreateLink"},
     {"title": "PasDoc_Gen.TDocGenerator.CreateStream", "text": " If CurrentStream still exists (&lt;&gt; nil), it is closed. Then, a new output stream in the destination directory is created and assigned to CurrentStream. The file is overwritten if exists.  Use this only for text files that you want to write using WriteXxx methods of this class (like WriteConverted). There's no point to use if for other files.  Returns True if creation was successful, False otherwise. When it returns False, the error message was already shown by DoMessage.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#CreateStream"},
     {"title": "PasDoc_Gen.TDocGenerator.ExtractEmailAddress", "text": " Searches for first appearance of the @ character    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#ExtractEmailAddress"},
     {"title": "PasDoc_Gen.TDocGenerator.FixEmailaddressWithoutMailTo", "text": " Otherwise it simply returns the input.  Needed to link email addresses properly which doesn't start with mailto:    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FixEmailaddressWithoutMailTo"},
     {"title": "PasDoc_Gen.TDocGenerator.ExtractWebAddress", "text": " It must either contain a http:// or start with www.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#ExtractWebAddress"},
     {"title": "PasDoc_Gen.TDocGenerator.FindGlobal", "text": " Returns a pointer to the item on success, nil otherwise.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FindGlobal"},
     {"title": "PasDoc_Gen.TDocGenerator.FindGlobalPasItem", "text": " Returns Nil if not found.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FindGlobalPasItem"},
     {"title": "PasDoc_Gen.TDocGenerator.FindGlobalPasItem", "text": " Assumes that Name is only one component (not something with dots inside). Returns Nil if not found.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FindGlobalPasItem"},
     {"title": "PasDoc_Gen.TDocGenerator.GetClassDirectiveName", "text": " GetClassDirectiveName is used by TTexDocGenerator and TGenericHTMLDocGenerator in writing the declaration of the class.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#GetClassDirectiveName"},
     {"title": "PasDoc_Gen.TDocGenerator.GetCIOTypeName", "text": " However, 'record' and 'packed record' are not translated.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#GetCIOTypeName"},
     {"title": "PasDoc_Gen.TDocGenerator.LoadDescriptionFile", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#LoadDescriptionFile"},
     {"title": "PasDoc_Gen.TDocGenerator.SearchItem", "text": "  If S is not splittable by SplitNameParts, returns nil. If WarningIfNotSplittable, additionally does DoMessage with appropriate warning.  Else (if S is &quot;splittable&quot;), seeks for S (first trying Item.FindName, if Item is not nil, then trying FindGlobal). Returns nil if not found.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#SearchItem"},
     {"title": "PasDoc_Gen.TDocGenerator.SearchLink", "text": " Starts search within item, then does a search on all items in all units using FindGlobal. Returns a link as String on success.  If S is not splittable by SplitNameParts, it always does DoMessage with appropriate warning and returns something like 'UNKNOWN' (no matter what is the value of WarningIfLinkNotFound). FoundItem will be set to nil in this case.  When item will not be found then:       if WarningIfLinkNotFound is true then it returns CodeString(ConvertString(S)) and makes DoMessage with appropriate warning.   else it returns '' (and does not do any DoMessage)     If LinkDisplay is not '', then it specifies explicite the display text for link. Else how exactly link does look like is controlled by LinkLook property.    FoundItem is the found item instance or nil if not found. FoundItem is the found item instance or nil if not found. ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#SearchLink"},
     {"title": "PasDoc_Gen.TDocGenerator.SearchLink", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#SearchLink"},
     {"title": "PasDoc_Gen.TDocGenerator.StoreDescription", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#StoreDescription"},
     {"title": "PasDoc_Gen.TDocGenerator.WriteConverted", "text": " Then optionally writes LineEnding.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#WriteConverted"},
     {"title": "PasDoc_Gen.TDocGenerator.WriteConverted", "text": " No LineEnding at the end.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#WriteConverted"},
     {"title": "PasDoc_Gen.TDocGenerator.WriteConvertedLine", "text": " Then writes LineEnding.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#WriteConvertedLine"},
     {"title": "PasDoc_Gen.TDocGenerator.WriteDirect", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#WriteDirect"},
     {"title": "PasDoc_Gen.TDocGenerator.WriteDirect", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#WriteDirect"},
     {"title": "PasDoc_Gen.TDocGenerator.WriteDirectLine", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#WriteDirectLine"},
     {"title": "PasDoc_Gen.TDocGenerator.WriteUnit", "text": " Implementation must be provided by descendant objects and is dependent on output format.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#WriteUnit"},
     {"title": "PasDoc_Gen.TDocGenerator.WriteUnits", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#WriteUnits"},
     {"title": "PasDoc_Gen.TDocGenerator.WriteStartOfCode", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#WriteStartOfCode"},
     {"title": "PasDoc_Gen.TDocGenerator.WriteEndOfCode", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#WriteEndOfCode"},
     {"title": "PasDoc_Gen.TDocGenerator.WriteGVUses", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#WriteGVUses"},
     {"title": "PasDoc_Gen.TDocGenerator.WriteGVClasses", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#WriteGVClasses"},
     {"title": "PasDoc_Gen.TDocGenerator.StartSpellChecking", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#StartSpellChecking"},
     {"title": "PasDoc_Gen.TDocGenerator.CheckString", "text": "  Otherwise this just clears AErrors, which means that no errors were found.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#CheckString"},
     {"title": "PasDoc_Gen.TDocGenerator.EndSpellChecking", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#EndSpellChecking"},
     {"title": "PasDoc_Gen.TDocGenerator.FormatPascalCode", "text": " Note that given Line is taken directly from what user put inside     , it is not even processed by ConvertString. You should process it with ConvertString if you want.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FormatPascalCode"},
     {"title": "PasDoc_Gen.TDocGenerator.FormatNormalCode", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FormatNormalCode"},
     {"title": "PasDoc_Gen.TDocGenerator.FormatComment", "text": " See: FormatCompilerComment.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FormatComment"},
     {"title": "PasDoc_Gen.TDocGenerator.FormatHex", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FormatHex"},
     {"title": "PasDoc_Gen.TDocGenerator.FormatNumeric", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FormatNumeric"},
     {"title": "PasDoc_Gen.TDocGenerator.FormatFloat", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FormatFloat"},
     {"title": "PasDoc_Gen.TDocGenerator.FormatString", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FormatString"},
     {"title": "PasDoc_Gen.TDocGenerator.FormatKeyWord", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FormatKeyWord"},
     {"title": "PasDoc_Gen.TDocGenerator.FormatCompilerComment", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FormatCompilerComment"},
     {"title": "PasDoc_Gen.TDocGenerator.Paragraph", "text": "  Default implementation in this class simply returns ' ' (one space).    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#Paragraph"},
     {"title": "PasDoc_Gen.TDocGenerator.ShortDash", "text": " Default implementation in this class returns '-'.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#ShortDash"},
     {"title": "PasDoc_Gen.TDocGenerator.EnDash", "text": " Default implementation in this class returns '--'.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#EnDash"},
     {"title": "PasDoc_Gen.TDocGenerator.EmDash", "text": " Default implementation in this class returns '---'.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#EmDash"},
     {"title": "PasDoc_Gen.TDocGenerator.HtmlString", "text": "  Note that S is not processed in any way, even with ConvertString. So you're able to copy user's input inside @html() verbatim to the output.  The default implementation is this class simply discards it, i.e. returns always ''. Generators that know what to do with HTML can override this with simple &quot;Result := S&quot;.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#HtmlString"},
     {"title": "PasDoc_Gen.TDocGenerator.LatexString", "text": "  The default implementation is this class simply discards it, i.e. returns always ''. Generators that know what to do with raw LaTeX markup can override this with simple &quot;Result := S&quot;.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#LatexString"},
     {"title": "PasDoc_Gen.TDocGenerator.LineBreak", "text": "  It is used on  tag (but may also be used on other occasions in the future).  In this class it returns '', because it's valid for an output generator to simply ignore  tags if linebreaks can't be expressed in given output format.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#LineBreak"},
     {"title": "PasDoc_Gen.TDocGenerator.URLLink", "text": " E.g. HTML generator will want to wrap this in &lt;a href=&quot;...&quot;&gt;...&lt;/a&gt;.  Note that passed here URL is not processed by ConvertString (because sometimes it could be undesirable). If you want you can process URL with ConvertString when overriding this method.  Default implementation in this class simply returns ConvertString(URL). This is good if your documentation format does not support anything like URL links.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#URLLink"},
     {"title": "PasDoc_Gen.TDocGenerator.URLLink", "text": "  URL is a link to a website or e-mail address. LinkDisplay is an optional parameter which will be used as the display name of the URL.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#URLLink"},
     {"title": "PasDoc_Gen.TDocGenerator.WriteExternal", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#WriteExternal"},
     {"title": "PasDoc_Gen.TDocGenerator.WriteExternalCore", "text": " This should write ExternalItem, including ExternalItem.DetailedDescription, ExternalItem.Authors, ExternalItem.Created, ExternalItem.LastMod.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#WriteExternalCore"},
     {"title": "PasDoc_Gen.TDocGenerator.WriteConclusion", "text": " See WriteExternal.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#WriteConclusion"},
     {"title": "PasDoc_Gen.TDocGenerator.WriteIntroduction", "text": " See WriteExternal.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#WriteIntroduction"},
     {"title": "PasDoc_Gen.TDocGenerator.WriteAdditionalFiles", "text": " See WriteExternal.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#WriteAdditionalFiles"},
     {"title": "PasDoc_Gen.TDocGenerator.FormatSection", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FormatSection"},
     {"title": "PasDoc_Gen.TDocGenerator.FormatAnchor", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FormatAnchor"},
     {"title": "PasDoc_Gen.TDocGenerator.FormatBold", "text": "  Given Text is already in the final output format (with characters converted using ConvertString, @-tags expanded etc.).  Implementation of this method in this class simply returns Result := Text. Output generators that can somehow express bold formatting (or at least emphasis of some text) should override this.      ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FormatBold"},
     {"title": "PasDoc_Gen.TDocGenerator.FormatItalic", "text": " Analogous to FormatBold.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FormatItalic"},
     {"title": "PasDoc_Gen.TDocGenerator.FormatWarning", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FormatWarning"},
     {"title": "PasDoc_Gen.TDocGenerator.FormatNote", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FormatNote"},
     {"title": "PasDoc_Gen.TDocGenerator.FormatPreformatted", "text": " Note that Text passed here is not yet converted with ConvertString. The implementation of this method in this class just returns ConvertString(Text).    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FormatPreformatted"},
     {"title": "PasDoc_Gen.TDocGenerator.FormatImage", "text": " FileNames is a list of possible filenames of the image. FileNames always contains at least one item (i.e. FileNames.Count &gt;= 1), never contains empty lines (i.e. Trim(FileNames[I]) &lt;&gt; ''), and contains only absolute filenames.  E.g. HTML generator will want to choose the best format for HTML, then somehow copy the image from FileNames[Chosen] and wrap this in &lt;img src=&quot;...&quot;&gt;.  Implementation of this method in this class simply shows FileNames[0]. Output generators should override this.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FormatImage"},
     {"title": "PasDoc_Gen.TDocGenerator.FormatList", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FormatList"},
     {"title": "PasDoc_Gen.TDocGenerator.FormatTable", "text": " It's guaranteed that the Table passed here will have at least one row and in each row there will be at least one cell, so you don't have to check it within descendants.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FormatTable"},
     {"title": "PasDoc_Gen.TDocGenerator.FormatTableOfContents", "text": " As a parameter you get already prepared tree of sections that your table of contents should show. Each item of Sections is a section on the level 1. Item's Name is section name, item's Value is section caption, item's Data is a TStringPairVector instance that describes subsections (on level 2) below this section. And so on, recursively.  Sections given here are never nil, and item's Data is never nil. But of course they may contain 0 items, and this should be a signal to you that given section doesn't have any subsections.  Default implementation of this method in this class just returns empty string.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#FormatTableOfContents"},
     {"title": "PasDoc_Gen.TDocGenerator.BuildLinks", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#BuildLinks"},
     {"title": "PasDoc_Gen.TDocGenerator.ExpandDescriptions", "text": " &quot;Expands description&quot; means that TTagManager.Execute is called, and item's DetailedDescription, AbstractDescription, AbstractDescriptionWasAutomatic (and many others, set by @-tags handlers) properties are calculated.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#ExpandDescriptions"},
     {"title": "PasDoc_Gen.TDocGenerator.GetFileExtension", "text": " Must be overwritten by descendants.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#GetFileExtension"},
     {"title": "PasDoc_Gen.TDocGenerator.LoadDescriptionFiles", "text": " Calls LoadDescriptionFile with each file name.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#LoadDescriptionFiles"},
     {"title": "PasDoc_Gen.TDocGenerator.WriteDocumentation", "text": " Will create either a single file or one file for each unit and each class, interface or object, depending on output format.    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#WriteDocumentation"},
     {"title": "PasDoc_Gen.TDocGenerator.Create", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#Create"},
     {"title": "PasDoc_Gen.TDocGenerator.Destroy", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#Destroy"},
     {"title": "PasDoc_Gen.TDocGenerator.ParseAbbreviationsFile", "text": "    ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#ParseAbbreviationsFile"},
     {"title": "PasDoc_Gen.TDocGenerator.CurrentStream", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#CurrentStream"},
     {"title": "PasDoc_Gen.TDocGenerator.Units", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#Units"},
     {"title": "PasDoc_Gen.TDocGenerator.Introduction", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#Introduction"},
     {"title": "PasDoc_Gen.TDocGenerator.Conclusion", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#Conclusion"},
     {"title": "PasDoc_Gen.TDocGenerator.AdditionalFiles", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#AdditionalFiles"},
     {"title": "PasDoc_Gen.TDocGenerator.OnMessage", "text": "  This is usually used internally by TPasDoc class, that assigns it's internal callback here when using this generator. Also, for the above reason, do not make this published.  See TPasDoc.OnMessage for something more useful for final programs.   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#OnMessage"},
     {"title": "PasDoc_Gen.TDocGenerator.Language", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#Language"},
     {"title": "PasDoc_Gen.TDocGenerator.ProjectName", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#ProjectName"},
     {"title": "PasDoc_Gen.TDocGenerator.ExcludeGenerator", "text": "  This includes      pasdoc's compiler name and version,   pasdoc's version and time of compilation    See [https://github.com/pasdoc/pasdoc/wiki/ExcludeGeneratorOption]. Default value is false (i.e. show them), as this information is generally considered useful.  Setting this to true is useful for automatically comparing two versions of pasdoc's output (e.g. when trying to automate pasdoc's tests).   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#ExcludeGenerator"},
     {"title": "PasDoc_Gen.TDocGenerator.IncludeCreationTime", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#IncludeCreationTime"},
     {"title": "PasDoc_Gen.TDocGenerator.UseLowercaseKeywords", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#UseLowercaseKeywords"},
     {"title": "PasDoc_Gen.TDocGenerator.Title", "text": " May be empty. See TPasDoc.Title.   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#Title"},
     {"title": "PasDoc_Gen.TDocGenerator.DestinationDirectory", "text": " Must include terminating forward slash or backslash so that valid file names can be created by concatenating DestinationDirectory and a pathless file name.   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#DestinationDirectory"},
     {"title": "PasDoc_Gen.TDocGenerator.OutputGraphVizUses", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#OutputGraphVizUses"},
     {"title": "PasDoc_Gen.TDocGenerator.OutputGraphVizClassHierarchy", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#OutputGraphVizClassHierarchy"},
     {"title": "PasDoc_Gen.TDocGenerator.LinkGraphVizUses", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#LinkGraphVizUses"},
     {"title": "PasDoc_Gen.TDocGenerator.LinkGraphVizClasses", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#LinkGraphVizClasses"},
     {"title": "PasDoc_Gen.TDocGenerator.Abbreviations", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#Abbreviations"},
     {"title": "PasDoc_Gen.TDocGenerator.CheckSpelling", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#CheckSpelling"},
     {"title": "PasDoc_Gen.TDocGenerator.AspellLanguage", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#AspellLanguage"},
     {"title": "PasDoc_Gen.TDocGenerator.SpellCheckIgnoreWords", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#SpellCheckIgnoreWords"},
     {"title": "PasDoc_Gen.TDocGenerator.AutoAbstract", "text": " It is used in ExpandDescriptions.   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#AutoAbstract"},
     {"title": "PasDoc_Gen.TDocGenerator.LinkLook", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#LinkLook"},
     {"title": "PasDoc_Gen.TDocGenerator.WriteUsesClause", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#WriteUsesClause"},
     {"title": "PasDoc_Gen.TDocGenerator.AutoLink", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#AutoLink"},
     {"title": "PasDoc_Gen.TDocGenerator.AutoLinkExclude", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#AutoLinkExclude"},
     {"title": "PasDoc_Gen.TDocGenerator.ExternalClassHierarchy", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#ExternalClassHierarchy"},
     {"title": "PasDoc_Gen.TDocGenerator.Markdown", "text": "   ", "tags": "", "url": "PasDoc_Gen.TDocGenerator.html#Markdown"},
     {"title": "PasDoc_Gen.OverviewFilesInfo", "text": "   ", "tags": "", "url": "PasDoc_Gen.html#OverviewFilesInfo"},
     {"title": "PasDoc_Gen.LowCreatedOverviewFile", "text": " Same for Low(TCreatedOverviewFile).  This is submitted as FPC bug 4140, [http://www.freepascal.org/bugs/showrec.php3?ID=4140]. Fixed in FPC 2.0.1 and FPC 2.1.1.   ", "tags": "", "url": "PasDoc_Gen.html#LowCreatedOverviewFile"},
     {"title": "PasDoc_Gen.HighCreatedOverviewFile", "text": "   ", "tags": "", "url": "PasDoc_Gen.html#HighCreatedOverviewFile"},
     {"title": "PasDoc_Gen.TOverviewFile", "text": "  But not all of them are supposed to be generated by pasdoc, some must be generated by external programs by user, e.g. uses and class diagrams must be made by user using programs such as GraphViz. See type TCreatedOverviewFile for subrange type of TOverviewFile that specifies only overview files that are really supposed to be made by pasdoc.    ofUnits    ofClassHierarchy    ofCios    ofTypes    ofVariables    ofConstants    ofFunctionsAndProcedures    ofIdentifiers    ofGraphVizUses    ofGraphVizClasses   ", "tags": "", "url": "PasDoc_Gen.html#TOverviewFile"},
     {"title": "PasDoc_Gen.TCreatedOverviewFile", "text": "   ", "tags": "", "url": "PasDoc_Gen.html#TCreatedOverviewFile"},
     {"title": "PasDoc_Gen.TLinkLook", "text": "    llDefault    llFull    llStripped   ", "tags": "", "url": "PasDoc_Gen.html#TLinkLook"},
     {"title": "PasDoc_Gen.TLinkContext", "text": "    lcCode This means that link is inside some larger code piece, e.g.  within FullDeclaration of some item etc. This means that we may be inside a context where used font has constant width.  lcNormal This means that link is inside some &quot;normal&quot; description text.  ", "tags": "", "url": "PasDoc_Gen.html#TLinkContext"},
     {"title": "PasDoc_Gen.TListType", "text": "    ltUnordered    ltOrdered    ltDefinition   ", "tags": "", "url": "PasDoc_Gen.html#TListType"},
     {"title": "PasDoc_Gen.TListItemSpacing", "text": "    lisCompact    lisParagraph   ", "tags": "", "url": "PasDoc_Gen.html#TListItemSpacing"},
     {"title": "PasDoc_GenHtml", "text": "                Implements an object to generate HTML documentation, overriding many of TDocGenerator's virtual methods. Johannes Berg  Ralf Junker (delphi@zeitungsjunge.de) Alexander Lisnevsky (alisnevsky@yandex.ru) Erwin Scheuch-Heilig (ScheuchHeilig@t-online.de) Marco Schmidt (marcoschmidt@geocities.com) Hendy Irawan (ceefour@gauldong.net) Wim van der Vegt (wvd_vegt@knoware.nl) Thomas Mueller (www.dummzeuch.de) David Berg (HTML Layout)  Grzegorz Skoczylas  Michalis Kamburelis Richard B. Winston  Ascanio Pressato Arno Garrels   Johannes Berg  Ralf Junker (delphi@zeitungsjunge.de) Alexander Lisnevsky (alisnevsky@yandex.ru) Erwin Scheuch-Heilig (ScheuchHeilig@t-online.de) Marco Schmidt (marcoschmidt@geocities.com) Hendy Irawan (ceefour@gauldong.net) Wim van der Vegt (wvd_vegt@knoware.nl) Thomas Mueller (www.dummzeuch.de) David Berg (HTML Layout)  Grzegorz Skoczylas  Michalis Kamburelis Richard B. Winston  Ascanio Pressato Arno Garrels   Johannes Berg  Ralf Junker (delphi@zeitungsjunge.de) Alexander Lisnevsky (alisnevsky@yandex.ru) Erwin Scheuch-Heilig (ScheuchHeilig@t-online.de) Marco Schmidt (marcoschmidt@geocities.com) Hendy Irawan (ceefour@gauldong.net) Wim van der Vegt (wvd_vegt@knoware.nl) Thomas Mueller (www.dummzeuch.de) David Berg (HTML Layout)  Grzegorz Skoczylas  Michalis Kamburelis Richard B. Winston  Ascanio Pressato Arno Garrels  ", "tags": "", "url": "PasDoc_GenHtml.html"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator", "text": " Extends TDocGenerator and overwrites many of its methods to generate output in HTML (HyperText Markup Language) format.   ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.MakeHead", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#MakeHead"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.MakeBodyBegin", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#MakeBodyBegin"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.MakeBodyEnd", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#MakeBodyEnd"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.ConvertString", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#ConvertString"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.ConvertChar", "text": " Will convert special characters to their html escape sequence -&gt; test    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#ConvertChar"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.WriteUnit", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#WriteUnit"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.HtmlString", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#HtmlString"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.FormatPascalCode", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#FormatPascalCode"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.FormatComment", "text": " See: FormatCompilerComment.    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#FormatComment"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.FormatHex", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#FormatHex"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.FormatNumeric", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#FormatNumeric"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.FormatFloat", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#FormatFloat"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.FormatString", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#FormatString"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.FormatKeyWord", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#FormatKeyWord"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.FormatCompilerComment", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#FormatCompilerComment"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.CodeString", "text": " &lt;CODE&gt;TheString&lt;/CODE&gt; in Html.    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#CodeString"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.CreateLink", "text": " HTML simply concatenates the strings with a &quot;#&quot; character between them.    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#CreateLink"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.WriteStartOfCode", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#WriteStartOfCode"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.WriteEndOfCode", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#WriteEndOfCode"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.WriteAnchor", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#WriteAnchor"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.WriteAnchor", "text": " Note that the Caption is assumed to be already processed with the ConvertString.    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#WriteAnchor"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.Paragraph", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#Paragraph"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.EnDash", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#EnDash"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.EmDash", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#EmDash"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.LineBreak", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#LineBreak"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.URLLink", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#URLLink"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.URLLink", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#URLLink"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.WriteExternalCore", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#WriteExternalCore"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.MakeItemLink", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#MakeItemLink"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.EscapeURL", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#EscapeURL"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.FormatSection", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#FormatSection"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.FormatAnchor", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#FormatAnchor"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.FormatBold", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#FormatBold"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.FormatItalic", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#FormatItalic"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.FormatWarning", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#FormatWarning"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.FormatNote", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#FormatNote"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.FormatPreformatted", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#FormatPreformatted"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.FormatImage", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#FormatImage"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.FormatList", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#FormatList"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.FormatTable", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#FormatTable"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.FormatTableOfContents", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#FormatTableOfContents"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.Create", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#Create"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.Destroy", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#Destroy"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.GetFileExtension", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#GetFileExtension"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.WriteDocumentation", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#WriteDocumentation"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.Header", "text": "   ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#Header"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.Footer", "text": "   ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#Footer"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.HtmlBodyBegin", "text": "   ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#HtmlBodyBegin"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.HtmlBodyEnd", "text": "   ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#HtmlBodyEnd"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.HtmlHead", "text": "   ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#HtmlHead"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.CSS", "text": "   ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#CSS"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.NumericFilenames", "text": "   ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#NumericFilenames"},
     {"title": "PasDoc_GenHtml.TGenericHTMLDocGenerator.UseTipueSearch", "text": " See [https://github.com/pasdoc/pasdoc/wiki/UseTipueSearchOption]   ", "tags": "", "url": "PasDoc_GenHtml.TGenericHTMLDocGenerator.html#UseTipueSearch"},
     {"title": "PasDoc_GenHtml.THTMLDocGenerator", "text": " In the future it may be extended to include some things not needed for HtmlHelp generator.   ", "tags": "", "url": "PasDoc_GenHtml.THTMLDocGenerator.html"},
     {"title": "PasDoc_GenHtml.THTMLDocGenerator.MakeBodyBegin", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.THTMLDocGenerator.html#MakeBodyBegin"},
     {"title": "PasDoc_GenHtml.THTMLDocGenerator.MakeBodyEnd", "text": "    ", "tags": "", "url": "PasDoc_GenHtml.THTMLDocGenerator.html#MakeBodyEnd"},
     {"title": "PasDoc_GenHtml.DefaultPasdocCss", "text": "   ", "tags": "", "url": "PasDoc_GenHtml.html#DefaultPasdocCss"},
     {"title": "PasDoc_GenHtmlHelp", "text": "   ", "tags": "", "url": "PasDoc_GenHtmlHelp.html"},
     {"title": "PasDoc_GenHtmlHelp.THTMLHelpDocGenerator", "text": "   ", "tags": "", "url": "PasDoc_GenHtmlHelp.THTMLHelpDocGenerator.html"},
     {"title": "PasDoc_GenHtmlHelp.THTMLHelpDocGenerator.WriteDocumentation", "text": "    ", "tags": "", "url": "PasDoc_GenHtmlHelp.THTMLHelpDocGenerator.html#WriteDocumentation"},
     {"title": "PasDoc_GenHtmlHelp.THTMLHelpDocGenerator.ContentsFile", "text": " If empty, create default contents file.   ", "tags": "", "url": "PasDoc_GenHtmlHelp.THTMLHelpDocGenerator.html#ContentsFile"},
     {"title": "PasDoc_GenLatex", "text": "  Implements an object to generate latex documentation, overriding many of TDocGenerator's virtual methods.   ", "tags": "", "url": "PasDoc_GenLatex.html"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator", "text": " Extends TDocGenerator and overwrites many of its methods to generate output in LaTex format.   ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.ConvertString", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#ConvertString"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.ConvertChar", "text": " Will convert special characters to their html escape sequence -&gt; test    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#ConvertChar"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.WriteUnit", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#WriteUnit"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.LatexString", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#LatexString"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.CodeString", "text": " '\\begin{ttfamily}TheString\\end{ttfamily}' in LaTeX. }    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#CodeString"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.CreateLink", "text": " LaTeX simply concatenates the strings with either a &quot;-&quot; or &quot;.&quot; character between them.    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#CreateLink"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.WriteStartOfCode", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#WriteStartOfCode"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.WriteEndOfCode", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#WriteEndOfCode"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.Paragraph", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#Paragraph"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.ShortDash", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#ShortDash"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.LineBreak", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#LineBreak"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.URLLink", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#URLLink"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.URLLink", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#URLLink"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.WriteExternalCore", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#WriteExternalCore"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.FormatKeyWord", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#FormatKeyWord"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.FormatCompilerComment", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#FormatCompilerComment"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.FormatComment", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#FormatComment"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.FormatAnchor", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#FormatAnchor"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.MakeItemLink", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#MakeItemLink"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.FormatBold", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#FormatBold"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.FormatItalic", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#FormatItalic"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.FormatWarning", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#FormatWarning"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.FormatNote", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#FormatNote"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.FormatPreformatted", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#FormatPreformatted"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.FormatImage", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#FormatImage"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.FormatList", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#FormatList"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.FormatTable", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#FormatTable"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.FormatPascalCode", "text": " However, unlike Lazarus and Delphi, colored text is not used because printing colored text tends to be much more expensive than printing all black text.    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#FormatPascalCode"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.GetFileExtension", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#GetFileExtension"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.WriteDocumentation", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#WriteDocumentation"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.Create", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#Create"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.Destroy", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#Destroy"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.EscapeURL", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#EscapeURL"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.FormatSection", "text": "    ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#FormatSection"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.Latex2rtf", "text": "   ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#Latex2rtf"},
     {"title": "PasDoc_GenLatex.TTexDocGenerator.LatexHead", "text": " Therefore they must be valid LaTeX code.   ", "tags": "", "url": "PasDoc_GenLatex.TTexDocGenerator.html#LatexHead"},
     {"title": "PasDoc_GenSimpleXML", "text": "   ", "tags": "", "url": "PasDoc_GenSimpleXML.html"},
     {"title": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator", "text": "   ", "tags": "", "url": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.html"},
     {"title": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.CodeString", "text": "    ", "tags": "", "url": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.html#CodeString"},
     {"title": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.ConvertString", "text": "    ", "tags": "", "url": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.html#ConvertString"},
     {"title": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.ConvertChar", "text": "    ", "tags": "", "url": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.html#ConvertChar"},
     {"title": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.WriteUnit", "text": "    ", "tags": "", "url": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.html#WriteUnit"},
     {"title": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.WriteExternalCore", "text": "    ", "tags": "", "url": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.html#WriteExternalCore"},
     {"title": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.FormatSection", "text": "    ", "tags": "", "url": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.html#FormatSection"},
     {"title": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.FormatAnchor", "text": "    ", "tags": "", "url": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.html#FormatAnchor"},
     {"title": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.FormatTable", "text": "    ", "tags": "", "url": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.html#FormatTable"},
     {"title": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.FormatList", "text": "    ", "tags": "", "url": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.html#FormatList"},
     {"title": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.FormatBold", "text": "    ", "tags": "", "url": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.html#FormatBold"},
     {"title": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.FormatItalic", "text": "    ", "tags": "", "url": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.html#FormatItalic"},
     {"title": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.WriteDocumentation", "text": "    ", "tags": "", "url": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.html#WriteDocumentation"},
     {"title": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.GetFileExtension", "text": "    ", "tags": "", "url": "PasDoc_GenSimpleXML.TSimpleXMLDocGenerator.html#GetFileExtension"},
     {"title": "PasDoc_Hashes", "text": " Before writing this unit, I've always missed Perl commands like $h{abc}='def' in Pascal.    Version 0.9.1 (works fine, don't know a bug, but 1.0? No, error checks are missing!)   This library is free software; you can redistribute it and/or modify it under the terms of the GNU Library General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.   This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public License for more details.   You should have received a copy of the GNU Library General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA  Thanks to:      Larry Wall for perl! And because I found a way how to implement a hash in perl's source code (hv.c and hv.h). This is not a direct translation from C to Pascal, but the algortithms are more or less the same.     Be warned:      There is NOT a single ERROR CHECK in this unit. So expect anything! Especially there are NO checks on NEW and GETMEM functions &mdash; this might be dangerous on machines with low memory.     Programmer's information:      you need Freepascal (http://www.freepascal.org) or Delphi (http://www.borland.com) to compile this unit   I recommend that you use Ansistrings {$H+} to be able to use keys longer than 255 chars     How to use this unit:     Simply put this unit in your uses line. You can use a new class - THash.  Initialize a hash (assuming &quot;var h: THash;&quot;): h:=THash.Create;  Save a String: h.SetString('key','value');          //perl: $h{key}='value'  Get the String back: string_var:=h.GetString('key');      //perl: $string_var=$h{key} returns '' if 'key' is not set  Test if a key has been set: if h.KeyExists('key') then...        //perl: if (exists $h{key}) ... returns a boolean  Delete a key h.DeleteKey('key');                  //perl: delete $h{key};  Which keys do exist? stringlist:=h.Keys;                  //perl: @list=keys %h; returns a TStringList  Which keys do exist beginning with a special string? stinglist:=h.Keys('abc'); returns all keys beginning with 'abc'  //perl: @list=grep /&circ;abc/, keys %h;  How many keys are there? number_of_keys:=h.Count;             //perl: $number=scalar keys %hash;  How many keys fit in memory allocated by THash? c:=h.Capacity; (property) THash automatically increases h.Capacity if needed. This property is similar to Delphi's TList.Capacity property. Note #1: You can't decrease h.Capacity. Note #2: Capacity must be 2**n -- Create sets Capacity:=8;          The same: Capacity:=17; , Capacity:=32;  I know there will be 4097 key/values in my hash. I don't want the hash's capacity to be 8192 (wasting 50% ram). What to do? h.MaxCapacity:=4096; =&gt; Capacity will never be &gt; 4096. Note: You can store more than MaxCapacity key/values in the       hash (as many as you want) but Count should be &gt;= Capacity       for best performance. MaxCapacity is -1 by default, meaning no limit.  Delete the hash h.Free;    OR h.Destroy;  Instead of just strings you can also save objects in my hash - anything that is a pointer can be saved. Similar to SetString and GetString  there are SetObject  and GetObject. The latter returns nil if the key is unknown. You can use both Set/GetString and Set/GetObject for a single key string - no problem. But if DeleteKey is called, both the string and the pointer are lost. If you want to store a pointer  and a string, it is faster to call  SetStringObject(key,string,pointer)  than SetString and SetObject. The same is true getting the data back - GetString and GetObject are  significantly slower  then a singe call to GetStringObject(key, var string, var pointer).  Happy programming!   Copyright (C) 2001-2014  Wolf Behrenhoff  and PasDoc developers  Copyright (C) 2001-2014  Wolf Behrenhoff  and PasDoc developers  Copyright (C) 2001-2014  Wolf Behrenhoff  and PasDoc developers ", "tags": "", "url": "PasDoc_Hashes.html"},
     {"title": "PasDoc_Hashes.THashEntry", "text": "   ", "tags": "", "url": "PasDoc_Hashes.THashEntry.html"},
     {"title": "PasDoc_Hashes.THashEntry.next", "text": "   ", "tags": "", "url": "PasDoc_Hashes.THashEntry.html#next"},
     {"title": "PasDoc_Hashes.THashEntry.hash", "text": "   ", "tags": "", "url": "PasDoc_Hashes.THashEntry.html#hash"},
     {"title": "PasDoc_Hashes.THashEntry.key", "text": "   ", "tags": "", "url": "PasDoc_Hashes.THashEntry.html#key"},
     {"title": "PasDoc_Hashes.THashEntry.value", "text": "   ", "tags": "", "url": "PasDoc_Hashes.THashEntry.html#value"},
     {"title": "PasDoc_Hashes.THashEntry.data", "text": "   ", "tags": "", "url": "PasDoc_Hashes.THashEntry.html#data"},
     {"title": "PasDoc_Hashes.THash", "text": "   ", "tags": "", "url": "PasDoc_Hashes.THash.html"},
     {"title": "PasDoc_Hashes.THash.Create", "text": "    ", "tags": "", "url": "PasDoc_Hashes.THash.html#Create"},
     {"title": "PasDoc_Hashes.THash.Destroy", "text": "    ", "tags": "", "url": "PasDoc_Hashes.THash.html#Destroy"},
     {"title": "PasDoc_Hashes.THash.SetObject", "text": "    ", "tags": "", "url": "PasDoc_Hashes.THash.html#SetObject"},
     {"title": "PasDoc_Hashes.THash.SetString", "text": "    ", "tags": "", "url": "PasDoc_Hashes.THash.html#SetString"},
     {"title": "PasDoc_Hashes.THash.SetStringObject", "text": "    ", "tags": "", "url": "PasDoc_Hashes.THash.html#SetStringObject"},
     {"title": "PasDoc_Hashes.THash.GetObject", "text": "    ", "tags": "", "url": "PasDoc_Hashes.THash.html#GetObject"},
     {"title": "PasDoc_Hashes.THash.GetString", "text": "    ", "tags": "", "url": "PasDoc_Hashes.THash.html#GetString"},
     {"title": "PasDoc_Hashes.THash.GetStringObject", "text": "    ", "tags": "", "url": "PasDoc_Hashes.THash.html#GetStringObject"},
     {"title": "PasDoc_Hashes.THash.KeyExists", "text": "    ", "tags": "", "url": "PasDoc_Hashes.THash.html#KeyExists"},
     {"title": "PasDoc_Hashes.THash.DeleteKey", "text": "    ", "tags": "", "url": "PasDoc_Hashes.THash.html#DeleteKey"},
     {"title": "PasDoc_Hashes.THash.Keys", "text": "    ", "tags": "", "url": "PasDoc_Hashes.THash.html#Keys"},
     {"title": "PasDoc_Hashes.THash.Keys", "text": "    ", "tags": "", "url": "PasDoc_Hashes.THash.html#Keys"},
     {"title": "PasDoc_Hashes.THash.Count", "text": "   ", "tags": "", "url": "PasDoc_Hashes.THash.html#Count"},
     {"title": "PasDoc_Hashes.THash.Capacity", "text": "   ", "tags": "", "url": "PasDoc_Hashes.THash.html#Capacity"},
     {"title": "PasDoc_Hashes.THash.MaxCapacity", "text": "   ", "tags": "", "url": "PasDoc_Hashes.THash.html#MaxCapacity"},
     {"title": "PasDoc_Hashes.TObjectHash", "text": "   ", "tags": "", "url": "PasDoc_Hashes.TObjectHash.html"},
     {"title": "PasDoc_Hashes.TObjectHash.Delete", "text": "    ", "tags": "", "url": "PasDoc_Hashes.TObjectHash.html#Delete"},
     {"title": "PasDoc_Hashes.TObjectHash.Items", "text": "   ", "tags": "", "url": "PasDoc_Hashes.TObjectHash.html#Items"},
     {"title": "PasDoc_Hashes.PPHashEntry", "text": "   ", "tags": "", "url": "PasDoc_Hashes.html#PPHashEntry"},
     {"title": "PasDoc_Hashes.PHashEntry", "text": "   ", "tags": "", "url": "PasDoc_Hashes.html#PHashEntry"},
     {"title": "PasDoc_Hashes.TFakeArray", "text": " I need this stupid array[0..0] definition! From Delphi4, I could use a dynamic array.   ", "tags": "", "url": "PasDoc_Hashes.html#TFakeArray"},
     {"title": "PasDoc_Hashes.PFakeArray", "text": "   ", "tags": "", "url": "PasDoc_Hashes.html#PFakeArray"},
     {"title": "PasDoc_HierarchyTree", "text": " Johannes Berg   Johannes Berg   Johannes Berg  ", "tags": "", "url": "PasDoc_HierarchyTree.html"},
     {"title": "PasDoc_HierarchyTree.TPasItemNode", "text": "   ", "tags": "", "url": "PasDoc_HierarchyTree.TPasItemNode.html"},
     {"title": "PasDoc_HierarchyTree.TPasItemNode.FChildren", "text": "   ", "tags": "", "url": "PasDoc_HierarchyTree.TPasItemNode.html#FChildren"},
     {"title": "PasDoc_HierarchyTree.TPasItemNode.FParent", "text": "   ", "tags": "", "url": "PasDoc_HierarchyTree.TPasItemNode.html#FParent"},
     {"title": "PasDoc_HierarchyTree.TPasItemNode.FItem", "text": "   ", "tags": "", "url": "PasDoc_HierarchyTree.TPasItemNode.html#FItem"},
     {"title": "PasDoc_HierarchyTree.TPasItemNode.FName", "text": "   ", "tags": "", "url": "PasDoc_HierarchyTree.TPasItemNode.html#FName"},
     {"title": "PasDoc_HierarchyTree.TPasItemNode.GetName", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.TPasItemNode.html#GetName"},
     {"title": "PasDoc_HierarchyTree.TPasItemNode.AddChild", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.TPasItemNode.html#AddChild"},
     {"title": "PasDoc_HierarchyTree.TPasItemNode.AddChild", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.TPasItemNode.html#AddChild"},
     {"title": "PasDoc_HierarchyTree.TPasItemNode.AddChild", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.TPasItemNode.html#AddChild"},
     {"title": "PasDoc_HierarchyTree.TPasItemNode.FindItem", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.TPasItemNode.html#FindItem"},
     {"title": "PasDoc_HierarchyTree.TPasItemNode.Adopt", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.TPasItemNode.html#Adopt"},
     {"title": "PasDoc_HierarchyTree.TPasItemNode.Orphan", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.TPasItemNode.html#Orphan"},
     {"title": "PasDoc_HierarchyTree.TPasItemNode.Sort", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.TPasItemNode.html#Sort"},
     {"title": "PasDoc_HierarchyTree.TPasItemNode.Create", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.TPasItemNode.html#Create"},
     {"title": "PasDoc_HierarchyTree.TPasItemNode.Destroy", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.TPasItemNode.html#Destroy"},
     {"title": "PasDoc_HierarchyTree.TPasItemNode.Level", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.TPasItemNode.html#Level"},
     {"title": "PasDoc_HierarchyTree.TPasItemNode.Name", "text": "   ", "tags": "", "url": "PasDoc_HierarchyTree.TPasItemNode.html#Name"},
     {"title": "PasDoc_HierarchyTree.TPasItemNode.Item", "text": "   ", "tags": "", "url": "PasDoc_HierarchyTree.TPasItemNode.html#Item"},
     {"title": "PasDoc_HierarchyTree.TPasItemNode.Parent", "text": "   ", "tags": "", "url": "PasDoc_HierarchyTree.TPasItemNode.html#Parent"},
     {"title": "PasDoc_HierarchyTree.TStringCardinalTree", "text": "   ", "tags": "", "url": "PasDoc_HierarchyTree.TStringCardinalTree.html"},
     {"title": "PasDoc_HierarchyTree.TStringCardinalTree.FRoot", "text": "   ", "tags": "", "url": "PasDoc_HierarchyTree.TStringCardinalTree.html#FRoot"},
     {"title": "PasDoc_HierarchyTree.TStringCardinalTree.GetIsEmpty", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.TStringCardinalTree.html#GetIsEmpty"},
     {"title": "PasDoc_HierarchyTree.TStringCardinalTree.GetFirstItem", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.TStringCardinalTree.html#GetFirstItem"},
     {"title": "PasDoc_HierarchyTree.TStringCardinalTree.NeedRoot", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.TStringCardinalTree.html#NeedRoot"},
     {"title": "PasDoc_HierarchyTree.TStringCardinalTree.ItemOfName", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.TStringCardinalTree.html#ItemOfName"},
     {"title": "PasDoc_HierarchyTree.TStringCardinalTree.InsertName", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.TStringCardinalTree.html#InsertName"},
     {"title": "PasDoc_HierarchyTree.TStringCardinalTree.InsertItem", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.TStringCardinalTree.html#InsertItem"},
     {"title": "PasDoc_HierarchyTree.TStringCardinalTree.InsertParented", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.TStringCardinalTree.html#InsertParented"},
     {"title": "PasDoc_HierarchyTree.TStringCardinalTree.InsertParented", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.TStringCardinalTree.html#InsertParented"},
     {"title": "PasDoc_HierarchyTree.TStringCardinalTree.MoveChildLast", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.TStringCardinalTree.html#MoveChildLast"},
     {"title": "PasDoc_HierarchyTree.TStringCardinalTree.Level", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.TStringCardinalTree.html#Level"},
     {"title": "PasDoc_HierarchyTree.TStringCardinalTree.NextItem", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.TStringCardinalTree.html#NextItem"},
     {"title": "PasDoc_HierarchyTree.TStringCardinalTree.Sort", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.TStringCardinalTree.html#Sort"},
     {"title": "PasDoc_HierarchyTree.TStringCardinalTree.Create", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.TStringCardinalTree.html#Create"},
     {"title": "PasDoc_HierarchyTree.TStringCardinalTree.Destroy", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.TStringCardinalTree.html#Destroy"},
     {"title": "PasDoc_HierarchyTree.TStringCardinalTree.IsEmpty", "text": "   ", "tags": "", "url": "PasDoc_HierarchyTree.TStringCardinalTree.html#IsEmpty"},
     {"title": "PasDoc_HierarchyTree.TStringCardinalTree.FirstItem", "text": "   ", "tags": "", "url": "PasDoc_HierarchyTree.TStringCardinalTree.html#FirstItem"},
     {"title": "PasDoc_HierarchyTree.NewStringCardinalTree", "text": "    ", "tags": "", "url": "PasDoc_HierarchyTree.html#NewStringCardinalTree"},
     {"title": "PasDoc_Items", "text": "          For each item (type, variable, class etc.) that may appear in a Pascal source code file and can thus be taken into the documentation, this unit provides an object type which will store name, unit, description and more on this item. Johannes Berg  Ralf Junker (delphi@zeitungsjunge.de) Marco Schmidt (marcoschmidt@geocities.com) Michalis Kamburelis Richard B. Winston  Damien Honeyford Arno Garrels   Johannes Berg  Ralf Junker (delphi@zeitungsjunge.de) Marco Schmidt (marcoschmidt@geocities.com) Michalis Kamburelis Richard B. Winston  Damien Honeyford Arno Garrels   Johannes Berg  Ralf Junker (delphi@zeitungsjunge.de) Marco Schmidt (marcoschmidt@geocities.com) Michalis Kamburelis Richard B. Winston  Damien Honeyford Arno Garrels  ", "tags": "", "url": "PasDoc_Items.html"},
     {"title": "PasDoc_Items.TRawDescriptionInfo", "text": " Besides the content, this also specifies filename, begin and end positions of given comment.   ", "tags": "", "url": "PasDoc_Items.TRawDescriptionInfo.html"},
     {"title": "PasDoc_Items.TRawDescriptionInfo.Content", "text": "   ", "tags": "", "url": "PasDoc_Items.TRawDescriptionInfo.html#Content"},
     {"title": "PasDoc_Items.TRawDescriptionInfo.StreamName", "text": " Will be '' if no comment was found. It will be ' ' if the comment was somehow read from more than one stream.   ", "tags": "", "url": "PasDoc_Items.TRawDescriptionInfo.html#StreamName"},
     {"title": "PasDoc_Items.TRawDescriptionInfo.BeginPosition", "text": "   ", "tags": "", "url": "PasDoc_Items.TRawDescriptionInfo.html#BeginPosition"},
     {"title": "PasDoc_Items.TRawDescriptionInfo.EndPosition", "text": "   ", "tags": "", "url": "PasDoc_Items.TRawDescriptionInfo.html#EndPosition"},
     {"title": "PasDoc_Items.TBaseItem", "text": "   ", "tags": "", "url": "PasDoc_Items.TBaseItem.html"},
     {"title": "PasDoc_Items.TBaseItem.Serialize", "text": " That's because current approach treats &quot;loading from cache&quot; as equivalent to parsing a unit and stores to cache right after parsing a unit. So what is generated by parser must be written to cache.  That said,        It will not break anything if you will accidentally store in cache something that is not generated by parser. That's because saving to cache will be done anyway right after doing parsing, so properties not initialized by parser will have their initial values anyway. You're just wasting memory for cache, and some cache saving/loading time.    For now, in implementation of serialize/deserialize we try to add even things not generated by parser in a commented out code. This way if approach to cache will change some day, we will be able to use this code.       ", "tags": "", "url": "PasDoc_Items.TBaseItem.html#Serialize"},
     {"title": "PasDoc_Items.TBaseItem.Deserialize", "text": "    ", "tags": "", "url": "PasDoc_Items.TBaseItem.html#Deserialize"},
     {"title": "PasDoc_Items.TBaseItem.Create", "text": "    ", "tags": "", "url": "PasDoc_Items.TBaseItem.html#Create"},
     {"title": "PasDoc_Items.TBaseItem.Destroy", "text": "    ", "tags": "", "url": "PasDoc_Items.TBaseItem.html#Destroy"},
     {"title": "PasDoc_Items.TBaseItem.RegisterTags", "text": " You can override it to add more handlers.    ", "tags": "", "url": "PasDoc_Items.TBaseItem.html#RegisterTags"},
     {"title": "PasDoc_Items.TBaseItem.FindItem", "text": " For units, it searches for items declared inside this unit (like a procedure, or a class in this unit). For classes it searches for items declared within this class (like a method or a property). For an enumerated type, it searches for members of this enumerated type.  All normal rules of ObjectPascal scope apply, which means that e.g. if this item is a unit, FindItem searches for a class named ItemName but it doesn't search for a method named ItemName inside some class of this unit. Just like in ObjectPascal the scope of identifiers declared within the class always stays within the class. Of course, in ObjectPascal you can qualify a method name with a class name, and you can also do such qualified links in pasdoc, but this is not handled by this routine (see FindName instead).  Returns nil if not found.  Note that it never compares ItemName with Self.Name. You may want to check this yourself if you want.  Note that for TPasItem descendants, it always returns also some TPasItem descendant (so if you use this method with some TPasItem instance, you can safely cast result of this method to TPasItem).  Implementation in this class always returns nil. Override as necessary.    ", "tags": "", "url": "PasDoc_Items.TBaseItem.html#FindItem"},
     {"title": "PasDoc_Items.TBaseItem.FindItemMaybeInAncestors", "text": " In this class, the default implementation just calls FindItem.    ", "tags": "", "url": "PasDoc_Items.TBaseItem.html#FindItemMaybeInAncestors"},
     {"title": "PasDoc_Items.TBaseItem.FindName", "text": "  While searching this tries to mimic ObjectPascal identifier scope as much as it can. It seaches within this item, but also within class enclosing this item, within ancestors of this class, within unit enclosing this item, then within units used by unit of this item.    ", "tags": "", "url": "PasDoc_Items.TBaseItem.html#FindName"},
     {"title": "PasDoc_Items.TBaseItem.RawDescriptionInfo", "text": "  This is intended to be initialized by parser.  This returns PRawDescriptionInfo instead of just TRawDescriptionInfo to allow natural setting of properties of this record (otherwise   Item.RawDescriptionInfo.StreamName := 'foo';   would not work as expected) .    ", "tags": "", "url": "PasDoc_Items.TBaseItem.html#RawDescriptionInfo"},
     {"title": "PasDoc_Items.TBaseItem.QualifiedName", "text": " This is intended to return a concise and not ambigous name. E.g. in case of TPasItem it is overridden to return Name qualified by class name and unit name.  In this class this simply returns Name.    ", "tags": "", "url": "PasDoc_Items.TBaseItem.html#QualifiedName"},
     {"title": "PasDoc_Items.TBaseItem.BasePath", "text": " Must always end with PathDelim. In this class, this simply returns GetCurrentDir (with PathDelim added if needed).    ", "tags": "", "url": "PasDoc_Items.TBaseItem.html#BasePath"},
     {"title": "PasDoc_Items.TBaseItem.DetailedDescription", "text": "  In case of TPasItem, this is something more elaborate than TPasItem.AbstractDescription.  This is already in the form suitable for final output, ready to be put inside final documentation.   ", "tags": "", "url": "PasDoc_Items.TBaseItem.html#DetailedDescription"},
     {"title": "PasDoc_Items.TBaseItem.RawDescription", "text": "  Actually, this is just a shortcut to RawDescriptionInfo.Content   ", "tags": "", "url": "PasDoc_Items.TBaseItem.html#RawDescription"},
     {"title": "PasDoc_Items.TBaseItem.FullLink", "text": "   ", "tags": "", "url": "PasDoc_Items.TBaseItem.html#FullLink"},
     {"title": "PasDoc_Items.TBaseItem.LastMod", "text": " This string is already in the form suitable for final output format (i.e. already processed by TDocGenerator.ConvertString).   ", "tags": "", "url": "PasDoc_Items.TBaseItem.html#LastMod"},
     {"title": "PasDoc_Items.TBaseItem.Name", "text": "   ", "tags": "", "url": "PasDoc_Items.TBaseItem.html#Name"},
     {"title": "PasDoc_Items.TBaseItem.Authors", "text": "   ", "tags": "", "url": "PasDoc_Items.TBaseItem.html#Authors"},
     {"title": "PasDoc_Items.TBaseItem.Created", "text": " This string is already in the form suitable for final output format (i.e. already processed by TDocGenerator.ConvertString).   ", "tags": "", "url": "PasDoc_Items.TBaseItem.html#Created"},
     {"title": "PasDoc_Items.TBaseItem.AutoLinkHereAllowed", "text": "   ", "tags": "", "url": "PasDoc_Items.TBaseItem.html#AutoLinkHereAllowed"},
     {"title": "PasDoc_Items.TPasItem", "text": "  Parser creates only items of this class (e.g. never some basic TBaseItem instance). This class introduces properties and methods pointing to parent unit (MyUnit) and parent class/interface/object/record (MyObject). Also many other things not needed at TBaseItem level are introduced here: things related to handling @abstract tag, @seealso tag, used to sorting items inside (Sort) and some more.   ", "tags": "", "url": "PasDoc_Items.TPasItem.html"},
     {"title": "PasDoc_Items.TPasItem.Serialize", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasItem.html#Serialize"},
     {"title": "PasDoc_Items.TPasItem.Deserialize", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasItem.html#Deserialize"},
     {"title": "PasDoc_Items.TPasItem.FindNameWithinUnit", "text": " If this item is a unit, it searches only inside this unit, else it searches only inside MyUnit unit.  Actually FindName uses this function.    ", "tags": "", "url": "PasDoc_Items.TPasItem.html#FindNameWithinUnit"},
     {"title": "PasDoc_Items.TPasItem.Create", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasItem.html#Create"},
     {"title": "PasDoc_Items.TPasItem.Destroy", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasItem.html#Destroy"},
     {"title": "PasDoc_Items.TPasItem.FindName", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasItem.html#FindName"},
     {"title": "PasDoc_Items.TPasItem.RegisterTags", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasItem.html#RegisterTags"},
     {"title": "PasDoc_Items.TPasItem.HasDescription", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasItem.html#HasDescription"},
     {"title": "PasDoc_Items.TPasItem.QualifiedName", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasItem.html#QualifiedName"},
     {"title": "PasDoc_Items.TPasItem.UnitRelativeQualifiedName", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasItem.html#UnitRelativeQualifiedName"},
     {"title": "PasDoc_Items.TPasItem.Sort", "text": " E.g. in case of TPasUnit, this method sorts all variables, consts, CIOs etc. inside (honouring SortSettings), and also recursively calls Sort(SortSettings) for every CIO.  Note that this does not guarantee that absolutely everything inside will be really sorted. Some items may be deliberately left unsorted, e.g. Members of TPasEnum are never sorted (their declared order always matters, so we shouldn't sort them when displaying their documentation &mdash; reader of such documentation would be seriously misleaded). Sorting of other things depends on SortSettings &mdash; e.g. without ssMethods, CIOs methods will not be sorted.  So actually this method makes sure that all things that should be sorted are really sorted.    ", "tags": "", "url": "PasDoc_Items.TPasItem.html#Sort"},
     {"title": "PasDoc_Items.TPasItem.SetAttributes", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasItem.html#SetAttributes"},
     {"title": "PasDoc_Items.TPasItem.BasePath", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasItem.html#BasePath"},
     {"title": "PasDoc_Items.TPasItem.HasOptionalInfo", "text": " Currently this checks Params and Raises and TPasMethod.Returns.    ", "tags": "", "url": "PasDoc_Items.TPasItem.html#HasOptionalInfo"},
     {"title": "PasDoc_Items.TPasItem.AbstractDescription", "text": " This is intended to be short (e.g. one sentence) description of this object.  This will be inited from @abstract tag in RawDescription, or cutted out from first sentence in RawDescription if --auto-abstract was used.  Note that this is already in the form suitable for final output, with tags expanded, chars converted etc.   ", "tags": "", "url": "PasDoc_Items.TPasItem.html#AbstractDescription"},
     {"title": "PasDoc_Items.TPasItem.AbstractDescriptionWasAutomatic", "text": "  Otherwise (if @abstract was specified explicitly, or there was no @abstract and AutoAbstract was false) this is set to false.  This is a useful hint for generators: it tells them that when they are printing both AbstractDescription and DetailedDescription of the item in one place (e.g. TTexDocGenerator.WriteItemLongDescription and TGenericHTMLDocGenerator.WriteItemLongDescription both do this) then they should not put any additional space between AbstractDescription and DetailedDescription.  This way when user will specify description like     { First sentence. Second sentence. } procedure Foo;    and --auto-abstract was on, then &quot;First sentence.&quot; is the AbstractDescription, &quot; Second sentence.&quot; is DetailedDescription, AbstractDescriptionWasAutomatic is true and and TGenericHTMLDocGenerator.WriteItemLongDescription can print them as &quot;First sentence. Second sentence.&quot;  Without this property, TGenericHTMLDocGenerator.WriteItemLongDescription would not be able to say that this abstract was deduced automatically and would print additional paragraph break that was not present in desscription, i.e. &quot;First sentence.&lt;p&gt; Second sentence.&quot;   ", "tags": "", "url": "PasDoc_Items.TPasItem.html#AbstractDescriptionWasAutomatic"},
     {"title": "PasDoc_Items.TPasItem.MyUnit", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasItem.html#MyUnit"},
     {"title": "PasDoc_Items.TPasItem.MyObject", "text": " Nil otherwise.   ", "tags": "", "url": "PasDoc_Items.TPasItem.html#MyObject"},
     {"title": "PasDoc_Items.TPasItem.MyEnum", "text": " Nil otherwise.   ", "tags": "", "url": "PasDoc_Items.TPasItem.html#MyEnum"},
     {"title": "PasDoc_Items.TPasItem.Visibility", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasItem.html#Visibility"},
     {"title": "PasDoc_Items.TPasItem.HintDirectives", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasItem.html#HintDirectives"},
     {"title": "PasDoc_Items.TPasItem.DeprecatedNote", "text": " Empty if none, always empty if HintDirectives does not contain hdDeprecated.   ", "tags": "", "url": "PasDoc_Items.TPasItem.html#DeprecatedNote"},
     {"title": "PasDoc_Items.TPasItem.FullDeclaration", "text": " This is full parsed declaration of the given item.  Note that that this is not used for some descendants. Right now it's used only with      TPasConstant   TPasFieldVariable (includes type, default values, etc.)   TPasType   TPasMethod (includes parameter list, procedural directives, etc.)   TPasProperty (includes read/write and storage specifiers, etc.)   TPasEnum  But in this special case, '...' is used instead of listing individual members, e.g. 'TEnumName = (...)'. You can get list of Members using TPasEnum.Members. Eventual specifics of each member should be also specified somewhere inside Members items, e.g.   TMyEnum = (meOne, meTwo = 3);   and   TMyEnum = (meOne, meTwo);   will both result in TPasEnum with equal FullDeclaration (just 'TMyEnum = (...)') but this '= 3' should be marked somewhere inside Members[1] properties.   TPasItem when it's a CIO's field.     The intention is that in the future all TPasItem descendants will always have approprtate FullDeclaration set. It all requires adjusting appropriate places in PasDoc_Parser to generate appropriate FullDeclaration.   ", "tags": "", "url": "PasDoc_Items.TPasItem.html#FullDeclaration"},
     {"title": "PasDoc_Items.TPasItem.SeeAlso", "text": "  Name of each item is the 1st part of @seealso parameter. Value is the 2nd part of @seealso parameter.   ", "tags": "", "url": "PasDoc_Items.TPasItem.html#SeeAlso"},
     {"title": "PasDoc_Items.TPasItem.Attributes", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasItem.html#Attributes"},
     {"title": "PasDoc_Items.TPasItem.Params", "text": "  Name of each item is the name of parameter (without any surrounding whitespace), Value of each item is users description for this item (in already-expanded form).  This is already in the form processed by TTagManager.Execute, i.e. with links resolved, html characters escaped etc. So don't convert them (e.g. before writing to the final docs) once again (by some ExpandDescription or ConvertString or anything like that).   ", "tags": "", "url": "PasDoc_Items.TPasItem.html#Params"},
     {"title": "PasDoc_Items.TPasItem.Raises", "text": "  Name of each item is the name of exception class (without any surrounding whitespace), Value of each item is users description for this item (in already-expanded form).  This is already in the form processed by TTagManager.Execute, i.e. with links resolved, html characters escaped etc. So don't convert them (e.g. before writing to the final docs) once again (by some ExpandDescription or ConvertString or anything like that).   ", "tags": "", "url": "PasDoc_Items.TPasItem.html#Raises"},
     {"title": "PasDoc_Items.TPasConstant", "text": "  Precise definition of &quot;constant&quot; for pasdoc purposes is &quot;a name associated with a value&quot;. Optionally, constant type may also be specified in declararion. Well, Pascal constant always has some type, but pasdoc is too weak to determine the implicit type of a constant, i.e. to unserstand that constand const A = 1 is of type Integer.   ", "tags": "", "url": "PasDoc_Items.TPasConstant.html"},
     {"title": "PasDoc_Items.TPasFieldVariable", "text": "  Precise definition is &quot;a name with some type&quot;. And Optionally with some initial value, for global variables. It also holds a nested constant of extended classes and records. In the future we may introduce here some property like Type: TPasType.   ", "tags": "", "url": "PasDoc_Items.TPasFieldVariable.html"},
     {"title": "PasDoc_Items.TPasFieldVariable.Serialize", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasFieldVariable.html#Serialize"},
     {"title": "PasDoc_Items.TPasFieldVariable.Deserialize", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasFieldVariable.html#Deserialize"},
     {"title": "PasDoc_Items.TPasFieldVariable.IsConstant", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasFieldVariable.html#IsConstant"},
     {"title": "PasDoc_Items.TPasType", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasType.html"},
     {"title": "PasDoc_Items.TPasEnum", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasEnum.html"},
     {"title": "PasDoc_Items.TPasEnum.FMembers", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasEnum.html#FMembers"},
     {"title": "PasDoc_Items.TPasEnum.Serialize", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasEnum.html#Serialize"},
     {"title": "PasDoc_Items.TPasEnum.Deserialize", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasEnum.html#Deserialize"},
     {"title": "PasDoc_Items.TPasEnum.StoreValueTag", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasEnum.html#StoreValueTag"},
     {"title": "PasDoc_Items.TPasEnum.RegisterTags", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasEnum.html#RegisterTags"},
     {"title": "PasDoc_Items.TPasEnum.FindItem", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasEnum.html#FindItem"},
     {"title": "PasDoc_Items.TPasEnum.Destroy", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasEnum.html#Destroy"},
     {"title": "PasDoc_Items.TPasEnum.Create", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasEnum.html#Create"},
     {"title": "PasDoc_Items.TPasEnum.Members", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasEnum.html#Members"},
     {"title": "PasDoc_Items.TPasMethod", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasMethod.html"},
     {"title": "PasDoc_Items.TPasMethod.FReturns", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasMethod.html#FReturns"},
     {"title": "PasDoc_Items.TPasMethod.FWhat", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasMethod.html#FWhat"},
     {"title": "PasDoc_Items.TPasMethod.FDirectives", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasMethod.html#FDirectives"},
     {"title": "PasDoc_Items.TPasMethod.Serialize", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasMethod.html#Serialize"},
     {"title": "PasDoc_Items.TPasMethod.Deserialize", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasMethod.html#Deserialize"},
     {"title": "PasDoc_Items.TPasMethod.StoreReturnsTag", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasMethod.html#StoreReturnsTag"},
     {"title": "PasDoc_Items.TPasMethod.Create", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasMethod.html#Create"},
     {"title": "PasDoc_Items.TPasMethod.Destroy", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasMethod.html#Destroy"},
     {"title": "PasDoc_Items.TPasMethod.RegisterTags", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasMethod.html#RegisterTags"},
     {"title": "PasDoc_Items.TPasMethod.HasOptionalInfo", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasMethod.html#HasOptionalInfo"},
     {"title": "PasDoc_Items.TPasMethod.What", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasMethod.html#What"},
     {"title": "PasDoc_Items.TPasMethod.Returns", "text": "  This is already in the form processed by TTagManager.Execute, i.e. with links resolved, html characters escaped etc. So don't convert them (e.g. before writing to the final docs) once again (by some ExpandDescription or ConvertString or anything like that).   ", "tags": "", "url": "PasDoc_Items.TPasMethod.html#Returns"},
     {"title": "PasDoc_Items.TPasMethod.Directives", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasMethod.html#Directives"},
     {"title": "PasDoc_Items.TPasProperty", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasProperty.html"},
     {"title": "PasDoc_Items.TPasProperty.FDefault", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasProperty.html#FDefault"},
     {"title": "PasDoc_Items.TPasProperty.FNoDefault", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasProperty.html#FNoDefault"},
     {"title": "PasDoc_Items.TPasProperty.FIndexDecl", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasProperty.html#FIndexDecl"},
     {"title": "PasDoc_Items.TPasProperty.FStoredID", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasProperty.html#FStoredID"},
     {"title": "PasDoc_Items.TPasProperty.FDefaultID", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasProperty.html#FDefaultID"},
     {"title": "PasDoc_Items.TPasProperty.FWriter", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasProperty.html#FWriter"},
     {"title": "PasDoc_Items.TPasProperty.FPropType", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasProperty.html#FPropType"},
     {"title": "PasDoc_Items.TPasProperty.FReader", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasProperty.html#FReader"},
     {"title": "PasDoc_Items.TPasProperty.Serialize", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasProperty.html#Serialize"},
     {"title": "PasDoc_Items.TPasProperty.Deserialize", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasProperty.html#Deserialize"},
     {"title": "PasDoc_Items.TPasProperty.IndexDecl", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasProperty.html#IndexDecl"},
     {"title": "PasDoc_Items.TPasProperty.Proptype", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasProperty.html#Proptype"},
     {"title": "PasDoc_Items.TPasProperty.Reader", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasProperty.html#Reader"},
     {"title": "PasDoc_Items.TPasProperty.Writer", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasProperty.html#Writer"},
     {"title": "PasDoc_Items.TPasProperty.Default", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasProperty.html#Default"},
     {"title": "PasDoc_Items.TPasProperty.DefaultID", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasProperty.html#DefaultID"},
     {"title": "PasDoc_Items.TPasProperty.NoDefault", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasProperty.html#NoDefault"},
     {"title": "PasDoc_Items.TPasProperty.StoredId", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasProperty.html#StoredId"},
     {"title": "PasDoc_Items.TPasCio", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasCio.html"},
     {"title": "PasDoc_Items.TPasCio.FClassDirective", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasCio.html#FClassDirective"},
     {"title": "PasDoc_Items.TPasCio.FFields", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasCio.html#FFields"},
     {"title": "PasDoc_Items.TPasCio.FMethods", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasCio.html#FMethods"},
     {"title": "PasDoc_Items.TPasCio.FProperties", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasCio.html#FProperties"},
     {"title": "PasDoc_Items.TPasCio.FAncestors", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasCio.html#FAncestors"},
     {"title": "PasDoc_Items.TPasCio.FOutputFileName", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasCio.html#FOutputFileName"},
     {"title": "PasDoc_Items.TPasCio.FMyType", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasCio.html#FMyType"},
     {"title": "PasDoc_Items.TPasCio.FHelperTypeIdentifier", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasCio.html#FHelperTypeIdentifier"},
     {"title": "PasDoc_Items.TPasCio.FCios", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasCio.html#FCios"},
     {"title": "PasDoc_Items.TPasCio.FTypes", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasCio.html#FTypes"},
     {"title": "PasDoc_Items.TPasCio.FNameWithGeneric", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasCio.html#FNameWithGeneric"},
     {"title": "PasDoc_Items.TPasCio.Serialize", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasCio.html#Serialize"},
     {"title": "PasDoc_Items.TPasCio.Deserialize", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasCio.html#Deserialize"},
     {"title": "PasDoc_Items.TPasCio.StoreMemberTag", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasCio.html#StoreMemberTag"},
     {"title": "PasDoc_Items.TPasCio.Create", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasCio.html#Create"},
     {"title": "PasDoc_Items.TPasCio.Destroy", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasCio.html#Destroy"},
     {"title": "PasDoc_Items.TPasCio.FindItem", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasCio.html#FindItem"},
     {"title": "PasDoc_Items.TPasCio.FindItemMaybeInAncestors", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasCio.html#FindItemMaybeInAncestors"},
     {"title": "PasDoc_Items.TPasCio.FindItemInAncestors", "text": " I.e. searches within the FirstAncestor, then within FirstAncestor.FirstAncestor, and so on. Returns nil if not found.    ", "tags": "", "url": "PasDoc_Items.TPasCio.html#FindItemInAncestors"},
     {"title": "PasDoc_Items.TPasCio.Sort", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasCio.html#Sort"},
     {"title": "PasDoc_Items.TPasCio.RegisterTags", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasCio.html#RegisterTags"},
     {"title": "PasDoc_Items.TPasCio.FirstAncestor", "text": " instance of the first ancestor of this Cio (or nil if it couldn't be found), or nil if Ancestors.Count = 0.    ", "tags": "", "url": "PasDoc_Items.TPasCio.html#FirstAncestor"},
     {"title": "PasDoc_Items.TPasCio.FirstAncestorName", "text": "  If Ancestor.Count &gt; 0 then it simply returns Ancestors[0], i.e. the name of the first ancestor as was specified at class declaration, else it returns ''.  So this method is roughly something like FirstAncestor.Name, but with a few notable differences:        FirstAncestor is nil if the ancestor was not found in items parsed by pasdoc. But this method will still return in this case name of ancestor.   FirstAncestor.Name is the name of ancestor as specified at declaration of an ancestor. But this method is the name of ancestor as specified at declaration of this cio &mdash; with the same letter case, with optional unit specifier.     If this function returns '', then you can be sure that FirstAncestor returns nil. The other way around is not necessarily true &mdash; FirstAncestor may be nil, but still this function may return something &lt;&gt; ''.    ", "tags": "", "url": "PasDoc_Items.TPasCio.html#FirstAncestorName"},
     {"title": "PasDoc_Items.TPasCio.ShowVisibility", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasCio.html#ShowVisibility"},
     {"title": "PasDoc_Items.TPasCio.Ancestors", "text": " Each item is a TStringPair, with      Name is the name (single Pascal identifier) of this ancestor,   Value is the full declaration of this ancestor. For example, in addition to Name, this may include &quot;specialize&quot; directive (for FPC generic specialization) at the beginning. And &quot;&lt;foo,bar&gt;&quot; section at the end (for FPC or Delphi generic specialization).   Data is a TPasItem reference to this ancestor, or Nil if not found. This is assigned only in TDocGenerator.BuildLinks.     Note that each ancestor is a TPasItem, not necessarily TPasCio. Consider e.g. the case    TMyStringList = Classes.TStringList; TMyExtendedStringList = class(TMyStringList)   ... end;   At least for now, such declaration will result in TPasType (not TPasCio!) with Name = 'TMyStringList', which means that ancestor of TMyExtendedStringList will be a TPasType instance.  Note that the PasDoc_Parser already takes care of correctly setting Ancestors when user didn't specify any ancestor name at cio declaration. E.g. if this cio is a class, and user didn't specify ancestor name at class declaration, and this class name is not 'TObject' (in case pasdoc parses the RTL), the Ancestors[0] will be set to 'TObject'.   ", "tags": "", "url": "PasDoc_Items.TPasCio.html#Ancestors"},
     {"title": "PasDoc_Items.TPasCio.Cios", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasCio.html#Cios"},
     {"title": "PasDoc_Items.TPasCio.ClassDirective", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasCio.html#ClassDirective"},
     {"title": "PasDoc_Items.TPasCio.Fields", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasCio.html#Fields"},
     {"title": "PasDoc_Items.TPasCio.HelperTypeIdentifier", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasCio.html#HelperTypeIdentifier"},
     {"title": "PasDoc_Items.TPasCio.Methods", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasCio.html#Methods"},
     {"title": "PasDoc_Items.TPasCio.Properties", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasCio.html#Properties"},
     {"title": "PasDoc_Items.TPasCio.MyType", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasCio.html#MyType"},
     {"title": "PasDoc_Items.TPasCio.OutputFileName", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasCio.html#OutputFileName"},
     {"title": "PasDoc_Items.TPasCio.Types", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasCio.html#Types"},
     {"title": "PasDoc_Items.TPasCio.NameWithGeneric", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasCio.html#NameWithGeneric"},
     {"title": "PasDoc_Items.EAnchorAlreadyExists", "text": "   ", "tags": "", "url": "PasDoc_Items.EAnchorAlreadyExists.html"},
     {"title": "PasDoc_Items.TExternalItem", "text": " TExternalItem is used to hold an introduction and conclusion to the project.   ", "tags": "", "url": "PasDoc_Items.TExternalItem.html"},
     {"title": "PasDoc_Items.TExternalItem.HandleTitleTag", "text": "    ", "tags": "", "url": "PasDoc_Items.TExternalItem.html#HandleTitleTag"},
     {"title": "PasDoc_Items.TExternalItem.HandleShortTitleTag", "text": "    ", "tags": "", "url": "PasDoc_Items.TExternalItem.html#HandleShortTitleTag"},
     {"title": "PasDoc_Items.TExternalItem.Create", "text": "    ", "tags": "", "url": "PasDoc_Items.TExternalItem.html#Create"},
     {"title": "PasDoc_Items.TExternalItem.Destroy", "text": "    ", "tags": "", "url": "PasDoc_Items.TExternalItem.html#Destroy"},
     {"title": "PasDoc_Items.TExternalItem.RegisterTags", "text": "    ", "tags": "", "url": "PasDoc_Items.TExternalItem.html#RegisterTags"},
     {"title": "PasDoc_Items.TExternalItem.FindItem", "text": "    ", "tags": "", "url": "PasDoc_Items.TExternalItem.html#FindItem"},
     {"title": "PasDoc_Items.TExternalItem.AddAnchor", "text": "    ", "tags": "", "url": "PasDoc_Items.TExternalItem.html#AddAnchor"},
     {"title": "PasDoc_Items.TExternalItem.AddAnchor", "text": " Otherwise it adds TAnchorItem with given name to Anchors. It also returns created TAnchorItem.    ", "tags": "", "url": "PasDoc_Items.TExternalItem.html#AddAnchor"},
     {"title": "PasDoc_Items.TExternalItem.BasePath", "text": "    ", "tags": "", "url": "PasDoc_Items.TExternalItem.html#BasePath"},
     {"title": "PasDoc_Items.TExternalItem.OutputFileName", "text": "   ", "tags": "", "url": "PasDoc_Items.TExternalItem.html#OutputFileName"},
     {"title": "PasDoc_Items.TExternalItem.ShortTitle", "text": "   ", "tags": "", "url": "PasDoc_Items.TExternalItem.html#ShortTitle"},
     {"title": "PasDoc_Items.TExternalItem.SourceFileName", "text": "   ", "tags": "", "url": "PasDoc_Items.TExternalItem.html#SourceFileName"},
     {"title": "PasDoc_Items.TExternalItem.Title", "text": "   ", "tags": "", "url": "PasDoc_Items.TExternalItem.html#Title"},
     {"title": "PasDoc_Items.TExternalItem.Anchors", "text": " The TAnchorItems have no content so, they should not be indexed separately.   ", "tags": "", "url": "PasDoc_Items.TExternalItem.html#Anchors"},
     {"title": "PasDoc_Items.TExternalItemList", "text": "   ", "tags": "", "url": "PasDoc_Items.TExternalItemList.html"},
     {"title": "PasDoc_Items.TExternalItemList.Get", "text": "    ", "tags": "", "url": "PasDoc_Items.TExternalItemList.html#Get"},
     {"title": "PasDoc_Items.TAnchorItem", "text": "   ", "tags": "", "url": "PasDoc_Items.TAnchorItem.html"},
     {"title": "PasDoc_Items.TAnchorItem.ExternalItem", "text": "   ", "tags": "", "url": "PasDoc_Items.TAnchorItem.html#ExternalItem"},
     {"title": "PasDoc_Items.TAnchorItem.SectionLevel", "text": " Otherwise this is 0.   ", "tags": "", "url": "PasDoc_Items.TAnchorItem.html#SectionLevel"},
     {"title": "PasDoc_Items.TAnchorItem.SectionCaption", "text": "   ", "tags": "", "url": "PasDoc_Items.TAnchorItem.html#SectionCaption"},
     {"title": "PasDoc_Items.TPasUnit", "text": "  Note: Remember to always set CacheDateTime after deserializing this unit.   ", "tags": "", "url": "PasDoc_Items.TPasUnit.html"},
     {"title": "PasDoc_Items.TPasUnit.FTypes", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#FTypes"},
     {"title": "PasDoc_Items.TPasUnit.FVariables", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#FVariables"},
     {"title": "PasDoc_Items.TPasUnit.FCIOs", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#FCIOs"},
     {"title": "PasDoc_Items.TPasUnit.FConstants", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#FConstants"},
     {"title": "PasDoc_Items.TPasUnit.FFuncsProcs", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#FFuncsProcs"},
     {"title": "PasDoc_Items.TPasUnit.FUsesUnits", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#FUsesUnits"},
     {"title": "PasDoc_Items.TPasUnit.FSourceFilename", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#FSourceFilename"},
     {"title": "PasDoc_Items.TPasUnit.FOutputFileName", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#FOutputFileName"},
     {"title": "PasDoc_Items.TPasUnit.FCacheDateTime", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#FCacheDateTime"},
     {"title": "PasDoc_Items.TPasUnit.FSourceFileDateTime", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#FSourceFileDateTime"},
     {"title": "PasDoc_Items.TPasUnit.FIsUnit", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#FIsUnit"},
     {"title": "PasDoc_Items.TPasUnit.FIsProgram", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#FIsProgram"},
     {"title": "PasDoc_Items.TPasUnit.Serialize", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#Serialize"},
     {"title": "PasDoc_Items.TPasUnit.Deserialize", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#Deserialize"},
     {"title": "PasDoc_Items.TPasUnit.Create", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#Create"},
     {"title": "PasDoc_Items.TPasUnit.Destroy", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#Destroy"},
     {"title": "PasDoc_Items.TPasUnit.AddCIO", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#AddCIO"},
     {"title": "PasDoc_Items.TPasUnit.AddConstant", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#AddConstant"},
     {"title": "PasDoc_Items.TPasUnit.AddType", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#AddType"},
     {"title": "PasDoc_Items.TPasUnit.AddVariable", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#AddVariable"},
     {"title": "PasDoc_Items.TPasUnit.FindInsideSomeClass", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#FindInsideSomeClass"},
     {"title": "PasDoc_Items.TPasUnit.FindInsideSomeEnum", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#FindInsideSomeEnum"},
     {"title": "PasDoc_Items.TPasUnit.FindItem", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#FindItem"},
     {"title": "PasDoc_Items.TPasUnit.Sort", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#Sort"},
     {"title": "PasDoc_Items.TPasUnit.FileNewerThanCache", "text": "  So if FileName contains some info generated from information of this unit, then we can somehow assume that FileName still contains valid information and we don't have to write it once again.  Sure, we're not really 100% sure that FileName still contains valid information, but that's how current approach to cache works.    ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#FileNewerThanCache"},
     {"title": "PasDoc_Items.TPasUnit.BasePath", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#BasePath"},
     {"title": "PasDoc_Items.TPasUnit.CIOs", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#CIOs"},
     {"title": "PasDoc_Items.TPasUnit.Constants", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#Constants"},
     {"title": "PasDoc_Items.TPasUnit.FuncsProcs", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#FuncsProcs"},
     {"title": "PasDoc_Items.TPasUnit.UsesUnits", "text": "  This is never nil.  After TDocGenerator.BuildLinks, for every i: UsesUnits.Objects[i] will point to TPasUnit object with Name = UsesUnits[i] (or nil, if pasdoc's didn't parse such unit). In other words, you will be able to use UsesUnits.Objects[i] to obtain given unit's instance, as parsed by pasdoc.   ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#UsesUnits"},
     {"title": "PasDoc_Items.TPasUnit.Types", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#Types"},
     {"title": "PasDoc_Items.TPasUnit.Variables", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#Variables"},
     {"title": "PasDoc_Items.TPasUnit.OutputFileName", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#OutputFileName"},
     {"title": "PasDoc_Items.TPasUnit.SourceFileName", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#SourceFileName"},
     {"title": "PasDoc_Items.TPasUnit.SourceFileDateTime", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#SourceFileDateTime"},
     {"title": "PasDoc_Items.TPasUnit.CacheDateTime", "text": " when cache data was generated. If cache was obtained from a file then this is just the cache file modification date/time.  If not WasDeserialized then this property has undefined value &ndash; don't use it.   ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#CacheDateTime"},
     {"title": "PasDoc_Items.TPasUnit.IsUnit", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#IsUnit"},
     {"title": "PasDoc_Items.TPasUnit.IsProgram", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasUnit.html#IsProgram"},
     {"title": "PasDoc_Items.TBaseItems", "text": "   ", "tags": "", "url": "PasDoc_Items.TBaseItems.html"},
     {"title": "PasDoc_Items.TBaseItems.Create", "text": "    ", "tags": "", "url": "PasDoc_Items.TBaseItems.html#Create"},
     {"title": "PasDoc_Items.TBaseItems.Destroy", "text": "    ", "tags": "", "url": "PasDoc_Items.TBaseItems.html#Destroy"},
     {"title": "PasDoc_Items.TBaseItems.FindListItem", "text": " In the base class (TBaseItems), this simply searches the items (not recursively).  In some cases, it may look within the items (recursively), when the identifiers inside the item are in same namespace as the items themselves. Example: it will look also inside enumerated types members, because (when &quot;scoped enums&quot; are off) the enumerated members are in the same namespace as the enumerated type name.  Returns Nil if nothing can be found.    ", "tags": "", "url": "PasDoc_Items.TBaseItems.html#FindListItem"},
     {"title": "PasDoc_Items.TBaseItems.InsertItems", "text": " Disposes C and sets it to nil.    ", "tags": "", "url": "PasDoc_Items.TBaseItems.html#InsertItems"},
     {"title": "PasDoc_Items.TBaseItems.Add", "text": "    ", "tags": "", "url": "PasDoc_Items.TBaseItems.html#Add"},
     {"title": "PasDoc_Items.TBaseItems.ClearAndAdd", "text": " Useful when you want the list to contain exactly the one given AObject.    ", "tags": "", "url": "PasDoc_Items.TBaseItems.html#ClearAndAdd"},
     {"title": "PasDoc_Items.TBaseItems.Delete", "text": "    ", "tags": "", "url": "PasDoc_Items.TBaseItems.html#Delete"},
     {"title": "PasDoc_Items.TBaseItems.Clear", "text": "    ", "tags": "", "url": "PasDoc_Items.TBaseItems.html#Clear"},
     {"title": "PasDoc_Items.TPasItems", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasItems.html"},
     {"title": "PasDoc_Items.TPasItems.FindListItem", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasItems.html#FindListItem"},
     {"title": "PasDoc_Items.TPasItems.CopyItems", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasItems.html#CopyItems"},
     {"title": "PasDoc_Items.TPasItems.CountCIO", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasItems.html#CountCIO"},
     {"title": "PasDoc_Items.TPasItems.RemovePrivateItems", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasItems.html#RemovePrivateItems"},
     {"title": "PasDoc_Items.TPasItems.SortDeep", "text": " This way it sorts recursively everything in this list.  This is equivalent to doing both SortShallow and SortOnlyInsideItems.    ", "tags": "", "url": "PasDoc_Items.TPasItems.html#SortDeep"},
     {"title": "PasDoc_Items.TPasItems.SortOnlyInsideItems", "text": " It does not sort the items on this list.    ", "tags": "", "url": "PasDoc_Items.TPasItems.html#SortOnlyInsideItems"},
     {"title": "PasDoc_Items.TPasItems.SortShallow", "text": " Unlike SortDeep, it does not call Sort for each of these items. So &quot;items inside items&quot; (e.g. class methods, if this list contains TPasCio objects) remain unsorted.    ", "tags": "", "url": "PasDoc_Items.TPasItems.html#SortShallow"},
     {"title": "PasDoc_Items.TPasItems.SetFullDeclaration", "text": " variables or fields declared like    A, B: Integer;      ", "tags": "", "url": "PasDoc_Items.TPasItems.html#SetFullDeclaration"},
     {"title": "PasDoc_Items.TPasItems.PasItemAt", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasItems.html#PasItemAt"},
     {"title": "PasDoc_Items.TPasMethods", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasMethods.html"},
     {"title": "PasDoc_Items.TPasMethods.FindListItem", "text": " Index is 0-based. There could be multiple items sharing the same name (overloads) while method of base class returns only the one most recently added item.  Returns Nil if nothing can be found.    ", "tags": "", "url": "PasDoc_Items.TPasMethods.html#FindListItem"},
     {"title": "PasDoc_Items.TPasProperties", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasProperties.html"},
     {"title": "PasDoc_Items.TPasNestedCios", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasNestedCios.html"},
     {"title": "PasDoc_Items.TPasNestedCios.Create", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasNestedCios.html#Create"},
     {"title": "PasDoc_Items.TPasTypes", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasTypes.html"},
     {"title": "PasDoc_Items.TPasTypes.FindListItem", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasTypes.html#FindListItem"},
     {"title": "PasDoc_Items.TPasUnits", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasUnits.html"},
     {"title": "PasDoc_Items.TPasUnits.ExistsUnit", "text": "    ", "tags": "", "url": "PasDoc_Items.TPasUnits.html#ExistsUnit"},
     {"title": "PasDoc_Items.TPasUnits.UnitAt", "text": "   ", "tags": "", "url": "PasDoc_Items.TPasUnits.html#UnitAt"},
     {"title": "PasDoc_Items.VisibilityStr", "text": "   ", "tags": "", "url": "PasDoc_Items.html#VisibilityStr"},
     {"title": "PasDoc_Items.AllVisibilities", "text": "   ", "tags": "", "url": "PasDoc_Items.html#AllVisibilities"},
     {"title": "PasDoc_Items.DefaultVisibilities", "text": "   ", "tags": "", "url": "PasDoc_Items.html#DefaultVisibilities"},
     {"title": "PasDoc_Items.InfoMergeTypeStr", "text": "   ", "tags": "", "url": "PasDoc_Items.html#InfoMergeTypeStr"},
     {"title": "PasDoc_Items.CIORecordType", "text": "   ", "tags": "", "url": "PasDoc_Items.html#CIORecordType"},
     {"title": "PasDoc_Items.CIONonHierarchy", "text": "   ", "tags": "", "url": "PasDoc_Items.html#CIONonHierarchy"},
     {"title": "PasDoc_Items.EmptyRawDescriptionInfo", "text": "   ", "tags": "", "url": "PasDoc_Items.html#EmptyRawDescriptionInfo"},
     {"title": "PasDoc_Items.MethodTypeToString", "text": "    ", "tags": "", "url": "PasDoc_Items.html#MethodTypeToString"},
     {"title": "PasDoc_Items.VisibilitiesToStr", "text": "    ", "tags": "", "url": "PasDoc_Items.html#VisibilitiesToStr"},
     {"title": "PasDoc_Items.VisToStr", "text": "    ", "tags": "", "url": "PasDoc_Items.html#VisToStr"},
     {"title": "PasDoc_Items.TVisibility", "text": "    viPublished indicates field or method is published   viPublic indicates field or method is public   viProtected indicates field or method is protected   viStrictProtected indicates field or method is strict protected   viPrivate indicates field or method is private   viStrictPrivate indicates field or method is strict private   viAutomated indicates field or method is automated   viImplicit implicit visibility, marks the implicit members if user used --implicit-visibility=implicit command-line option.  ", "tags": "", "url": "PasDoc_Items.html#TVisibility"},
     {"title": "PasDoc_Items.TVisibilities", "text": "   ", "tags": "", "url": "PasDoc_Items.html#TVisibilities"},
     {"title": "PasDoc_Items.TInfoMergeType", "text": "    imtNone impl section is not scanned - default behavior   imtPreferIntf data is taken from intf, if it's empty - from impl   imtJoin data is concatenated   imtPreferImpl data is taken from impl, if it's empty - from intf  ", "tags": "", "url": "PasDoc_Items.html#TInfoMergeType"},
     {"title": "PasDoc_Items.PRawDescriptionInfo", "text": "   ", "tags": "", "url": "PasDoc_Items.html#PRawDescriptionInfo"},
     {"title": "PasDoc_Items.THintDirective", "text": "    hdDeprecated    hdPlatform    hdLibrary    hdExperimental   ", "tags": "", "url": "PasDoc_Items.html#THintDirective"},
     {"title": "PasDoc_Items.THintDirectives", "text": "   ", "tags": "", "url": "PasDoc_Items.html#THintDirectives"},
     {"title": "PasDoc_Items.TMethodType", "text": "    METHOD_CONSTRUCTOR    METHOD_DESTRUCTOR    METHOD_FUNCTION    METHOD_PROCEDURE    METHOD_OPERATOR   ", "tags": "", "url": "PasDoc_Items.html#TMethodType"},
     {"title": "PasDoc_Items.TCIOType", "text": "    CIO_CLASS    CIO_PACKEDCLASS    CIO_DISPINTERFACE    CIO_INTERFACE    CIO_OBJECT    CIO_PACKEDOBJECT    CIO_RECORD    CIO_PACKEDRECORD   ", "tags": "", "url": "PasDoc_Items.html#TCIOType"},
     {"title": "PasDoc_Items.TClassDirective", "text": "    CT_NONE    CT_ABSTRACT    CT_SEALED    CT_HELPER   ", "tags": "", "url": "PasDoc_Items.html#TClassDirective"},
     {"title": "PasDoc_Languages", "text": "                             Johannes Berg  Ralf Junker  Andrew Andreev  (Bulgarian translation) Alexander Lisnevsky  (Russian translation) Hendy Irawan  (Indonesian and Javanese translation) Ivan Montes Velencoso (Catalan and Spanish translations) Javi (Spanish translation) Jean Dit Bailleul (Frensh translation) Marc Weustinks (Dutch translation) Martin Hansen  (Danish translation) Michele Bersini  (Italian translation) Peter Simkovic  (Slovak translation) Peter Th_rnqvist  (Swedish translation) Rodrigo Urubatan Ferreira Jardim  (Brasilian translation) Alexandre da Silva  (Brasilian translation - Update) Alexsander da Rosa  (Brasilian translation - UTF8) Vitaly Kovalenko  (Russian translation) Grzegorz Skoczylas  (corrected Polish translation) Jonas Gergo  (Hungarian translation) Michalis Kamburelis Ascanio Pressato (Some Italian translation) JBarbero Quiter (updated Spanish translation) Liu Chuanjun  (Chinese gb2312 translation) Liu Da  (Chinese gb2312 translation) DoDi Rene Mihula  (Czech translation) Yann Merignac (French translation) Arno Garrels   Johannes Berg  Ralf Junker  Andrew Andreev  (Bulgarian translation) Alexander Lisnevsky  (Russian translation) Hendy Irawan  (Indonesian and Javanese translation) Ivan Montes Velencoso (Catalan and Spanish translations) Javi (Spanish translation) Jean Dit Bailleul (Frensh translation) Marc Weustinks (Dutch translation) Martin Hansen  (Danish translation) Michele Bersini  (Italian translation) Peter Simkovic  (Slovak translation) Peter Th_rnqvist  (Swedish translation) Rodrigo Urubatan Ferreira Jardim  (Brasilian translation) Alexandre da Silva  (Brasilian translation - Update) Alexsander da Rosa  (Brasilian translation - UTF8) Vitaly Kovalenko  (Russian translation) Grzegorz Skoczylas  (corrected Polish translation) Jonas Gergo  (Hungarian translation) Michalis Kamburelis Ascanio Pressato (Some Italian translation) JBarbero Quiter (updated Spanish translation) Liu Chuanjun  (Chinese gb2312 translation) Liu Da  (Chinese gb2312 translation) DoDi Rene Mihula  (Czech translation) Yann Merignac (French translation) Arno Garrels   Johannes Berg  Ralf Junker  Andrew Andreev  (Bulgarian translation) Alexander Lisnevsky  (Russian translation) Hendy Irawan  (Indonesian and Javanese translation) Ivan Montes Velencoso (Catalan and Spanish translations) Javi (Spanish translation) Jean Dit Bailleul (Frensh translation) Marc Weustinks (Dutch translation) Martin Hansen  (Danish translation) Michele Bersini  (Italian translation) Peter Simkovic  (Slovak translation) Peter Th_rnqvist  (Swedish translation) Rodrigo Urubatan Ferreira Jardim  (Brasilian translation) Alexandre da Silva  (Brasilian translation - Update) Alexsander da Rosa  (Brasilian translation - UTF8) Vitaly Kovalenko  (Russian translation) Grzegorz Skoczylas  (corrected Polish translation) Jonas Gergo  (Hungarian translation) Michalis Kamburelis Ascanio Pressato (Some Italian translation) JBarbero Quiter (updated Spanish translation) Liu Chuanjun  (Chinese gb2312 translation) Liu Da  (Chinese gb2312 translation) DoDi Rene Mihula  (Czech translation) Yann Merignac (French translation) Arno Garrels  ", "tags": "", "url": "PasDoc_Languages.html"},
     {"title": "PasDoc_Languages.TLanguageRecord", "text": "   ", "tags": "", "url": "PasDoc_Languages.TLanguageRecord.html"},
     {"title": "PasDoc_Languages.TLanguageRecord.Table", "text": "   ", "tags": "", "url": "PasDoc_Languages.TLanguageRecord.html#Table"},
     {"title": "PasDoc_Languages.TLanguageRecord.Name", "text": "   ", "tags": "", "url": "PasDoc_Languages.TLanguageRecord.html#Name"},
     {"title": "PasDoc_Languages.TLanguageRecord.Syntax", "text": "   ", "tags": "", "url": "PasDoc_Languages.TLanguageRecord.html#Syntax"},
     {"title": "PasDoc_Languages.TLanguageRecord.CharSet", "text": "   ", "tags": "", "url": "PasDoc_Languages.TLanguageRecord.html#CharSet"},
     {"title": "PasDoc_Languages.TLanguageRecord.AspellLanguage", "text": "  Set this to empty string if it's the same as our Syntax up to a dot. So a Syntax = 'pl' or Syntax = 'pl.iso-8859-2' already indicates AspellLanguage = 'pl'.  TODO: In the future, it would be nice if all language names used by PasDoc and Aspell matched. Aspell language naming follows the standard http://en.wikipedia.org/wiki/ISO_639-1 as far as I see, and we should probably follow it too (currently, we deviate for some languages).  So in the future, we'll probably replace Syntax and AspellLanguage by LanguageCode and CharsetCode. LanguageCode = code (suitable for both PasDoc and Aspell command-line; the thing currently up to a dot in Syntax), CharsetCode = the short representation of CharSet (the thing currently after a dot in Syntax).   ", "tags": "", "url": "PasDoc_Languages.TLanguageRecord.html#AspellLanguage"},
     {"title": "PasDoc_Languages.TPasDocLanguages", "text": "   ", "tags": "", "url": "PasDoc_Languages.TPasDocLanguages.html"},
     {"title": "PasDoc_Languages.TPasDocLanguages.FCharSet", "text": "   ", "tags": "", "url": "PasDoc_Languages.TPasDocLanguages.html#FCharSet"},
     {"title": "PasDoc_Languages.TPasDocLanguages.GetTranslation", "text": "    ", "tags": "", "url": "PasDoc_Languages.TPasDocLanguages.html#GetTranslation"},
     {"title": "PasDoc_Languages.TPasDocLanguages.Create", "text": "    ", "tags": "", "url": "PasDoc_Languages.TPasDocLanguages.html#Create"},
     {"title": "PasDoc_Languages.TPasDocLanguages.CharSet", "text": "   ", "tags": "", "url": "PasDoc_Languages.TPasDocLanguages.html#CharSet"},
     {"title": "PasDoc_Languages.TPasDocLanguages.Translation", "text": "   ", "tags": "", "url": "PasDoc_Languages.TPasDocLanguages.html#Translation"},
     {"title": "PasDoc_Languages.TPasDocLanguages.Language", "text": "   ", "tags": "", "url": "PasDoc_Languages.TPasDocLanguages.html#Language"},
     {"title": "PasDoc_Languages.DEFAULT_LANGUAGE", "text": "   ", "tags": "", "url": "PasDoc_Languages.html#DEFAULT_LANGUAGE"},
     {"title": "PasDoc_Languages.lgDefault", "text": "   ", "tags": "", "url": "PasDoc_Languages.html#lgDefault"},
     {"title": "PasDoc_Languages.LanguageFromIndex", "text": "    ", "tags": "", "url": "PasDoc_Languages.html#LanguageFromIndex"},
     {"title": "PasDoc_Languages.LanguageFromID", "text": "    ", "tags": "", "url": "PasDoc_Languages.html#LanguageFromID"},
     {"title": "PasDoc_Languages.SyntaxFromIndex", "text": "    ", "tags": "", "url": "PasDoc_Languages.html#SyntaxFromIndex"},
     {"title": "PasDoc_Languages.SyntaxFromID", "text": "    ", "tags": "", "url": "PasDoc_Languages.html#SyntaxFromID"},
     {"title": "PasDoc_Languages.IDfromLanguage", "text": "    ", "tags": "", "url": "PasDoc_Languages.html#IDfromLanguage"},
     {"title": "PasDoc_Languages.Translation", "text": "    ", "tags": "", "url": "PasDoc_Languages.html#Translation"},
     {"title": "PasDoc_Languages.LanguageFromStr", "text": " Returns True and sets LanguageId if found, otherwise returns False.    ", "tags": "", "url": "PasDoc_Languages.html#LanguageFromStr"},
     {"title": "PasDoc_Languages.LanguageDescriptor", "text": "    ", "tags": "", "url": "PasDoc_Languages.html#LanguageDescriptor"},
     {"title": "PasDoc_Languages.LanguageCode", "text": "    ", "tags": "", "url": "PasDoc_Languages.html#LanguageCode"},
     {"title": "PasDoc_Languages.TLanguageID", "text": "    lgBosnian    lgBrazilian_1252    lgBrazilian_utf8    lgBulgarian    lgCatalan    lgChinese_gb2312    lgCroatian    lgDanish    lgDutch    lgEnglish    lgFrench_ISO_8859_15    lgFrench_UTF_8    lgGerman_ISO_8859_15    lgGerman_UTF_8    lgIndonesian    lgItalian    lgJavanese    lgPolish_CP1250    lgPolish_ISO_8859_2    lgRussian_1251    lgRussian_utf8    lgRussian_866    lgRussian_koi8    lgSlovak    lgSpanish    lgSwedish    lgHungarian_1250    lgCzech_CP1250    lgCzech_ISO_8859_2   ", "tags": "", "url": "PasDoc_Languages.html#TLanguageID"},
     {"title": "PasDoc_Languages.TTranslationID", "text": " Warning: count and order changed!    trNoTrans no translation ID assigned, so far   trLanguage the language name (English, ASCII), e.g.  for file names.  trUnits map   trClassHierarchy    trCio    trNestedCR    trNestedTypes    trIdentifiers    trGvUses    trGvClasses    trClasses tables and members   trClass    trDispInterface    trInterface    trObjects    trObject    trRecord    trPacked    trHierarchy    trFields    trMethods    trProperties    trLibrary    trPackage    trProgram    trUnit    trUses    trConstants    trFunctionsAndProcedures    trTypes    trType    trVariables    trAuthors    trAuthor    trCreated    trLastModified    trSubroutine    trParameters    trReturns    trExceptionsRaised    trExceptions    trException    trEnum    trVisibility visibilities   trPrivate    trStrictPrivate    trProtected    trStrictProtected    trPublic    trPublished    trAutomated    trImplicit    trDeprecated hints   trPlatformSpecific    trLibrarySpecific    trExperimental    trOverview headings   trIntroduction    trConclusion    trAdditionalFile    trEnclosingClass    trHeadlineCio    trHeadlineConstants    trHeadlineFunctionsAndProcedures    trHeadlineIdentifiers    trHeadlineTypes    trHeadlineUnits    trHeadlineVariables    trSummaryCio    trDeclaration column headings   trDescription as column OR section heading!   trDescriptions section heading for detailed descriptions   trName    trValues    trWarningTag tags with inbuilt heading   trNoteTag    trNone empty tables   trNoCIOs    trNoCIOsForHierarchy    trNoTypes    trNoVariables    trNoConstants    trNoFunctions    trNoIdentifiers    trHelp misc   trLegend    trMarker    trWarningOverwrite    trWarning    trGeneratedBy    trGeneratedOn    trOnDateTime    trSearch    trSeeAlso    trNested    trAttributes add more here   trDummy   ", "tags": "", "url": "PasDoc_Languages.html#TTranslationID"},
     {"title": "PasDoc_Languages.RTransTable", "text": "   ", "tags": "", "url": "PasDoc_Languages.html#RTransTable"},
     {"title": "PasDoc_Languages.PTransTable", "text": "   ", "tags": "", "url": "PasDoc_Languages.html#PTransTable"},
     {"title": "PasDoc_Languages.PLanguageRecord", "text": "   ", "tags": "", "url": "PasDoc_Languages.html#PLanguageRecord"},
     {"title": "PasDoc_Main", "text": "   ", "tags": "", "url": "PasDoc_Main.html"},
     {"title": "PasDoc_Main.Main", "text": "    ", "tags": "", "url": "PasDoc_Main.html#Main"},
     {"title": "PasDoc_ObjectVector", "text": " Johannes Berg  Michalis Kamburelis  Johannes Berg  Michalis Kamburelis  Johannes Berg  Michalis Kamburelis ", "tags": "", "url": "PasDoc_ObjectVector.html"},
     {"title": "PasDoc_ObjectVector.TObjectVector", "text": "   ", "tags": "", "url": "PasDoc_ObjectVector.TObjectVector.html"},
     {"title": "PasDoc_ObjectVector.TObjectVector.Create", "text": "    ", "tags": "", "url": "PasDoc_ObjectVector.TObjectVector.html#Create"},
     {"title": "PasDoc_ObjectVector.ObjectVectorIsNilOrEmpty", "text": "    ", "tags": "", "url": "PasDoc_ObjectVector.html#ObjectVectorIsNilOrEmpty"},
     {"title": "PasDoc_OptionParser", "text": "   To use this unit, create an object of TOptionParser and add options to it, each option descends from TOption. Then, call your object's TOptionParser.ParseOptions method and options are parsed. After parsing, examine your option objects. Johannes Berg   Johannes Berg   Johannes Berg  ", "tags": "", "url": "PasDoc_OptionParser.html"},
     {"title": "PasDoc_OptionParser.TOption", "text": " This class implements all the basic functionality and provides abstract methods for the TOptionParser class to call, which are overridden by descendants. It also provides function to write the explanation.   ", "tags": "", "url": "PasDoc_OptionParser.TOption.html"},
     {"title": "PasDoc_OptionParser.TOption.FShort", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOption.html#FShort"},
     {"title": "PasDoc_OptionParser.TOption.FLong", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOption.html#FLong"},
     {"title": "PasDoc_OptionParser.TOption.FShortSens", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOption.html#FShortSens"},
     {"title": "PasDoc_OptionParser.TOption.FLongSens", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOption.html#FLongSens"},
     {"title": "PasDoc_OptionParser.TOption.FExplanation", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOption.html#FExplanation"},
     {"title": "PasDoc_OptionParser.TOption.FWasSpecified", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOption.html#FWasSpecified"},
     {"title": "PasDoc_OptionParser.TOption.FParser", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOption.html#FParser"},
     {"title": "PasDoc_OptionParser.TOption.ParseOption", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TOption.html#ParseOption"},
     {"title": "PasDoc_OptionParser.TOption.Create", "text": " Set AShort to #0 in order to have no short option. Technically you can set ALong to '' to have no long option, but in practive *every* option should have long form. Don't override this in descendants (this always simply calls CreateEx). Override only CreateEx.    ", "tags": "", "url": "PasDoc_OptionParser.TOption.html#Create"},
     {"title": "PasDoc_OptionParser.TOption.CreateEx", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TOption.html#CreateEx"},
     {"title": "PasDoc_OptionParser.TOption.GetOptionWidth", "text": " Removes non-existant options (longoption = '' or shortoption = #0)    ", "tags": "", "url": "PasDoc_OptionParser.TOption.html#GetOptionWidth"},
     {"title": "PasDoc_OptionParser.TOption.WriteExplanation", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TOption.html#WriteExplanation"},
     {"title": "PasDoc_OptionParser.TOption.ShortForm", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOption.html#ShortForm"},
     {"title": "PasDoc_OptionParser.TOption.LongForm", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOption.html#LongForm"},
     {"title": "PasDoc_OptionParser.TOption.ShortCaseSensitive", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOption.html#ShortCaseSensitive"},
     {"title": "PasDoc_OptionParser.TOption.LongCaseSensitive", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOption.html#LongCaseSensitive"},
     {"title": "PasDoc_OptionParser.TOption.WasSpecified", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOption.html#WasSpecified"},
     {"title": "PasDoc_OptionParser.TOption.Explanation", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOption.html#Explanation"},
     {"title": "PasDoc_OptionParser.TBoolOption", "text": " turned off when not specified, turned on when specified. Cannot handle --option=false et al.   ", "tags": "", "url": "PasDoc_OptionParser.TBoolOption.html"},
     {"title": "PasDoc_OptionParser.TBoolOption.ParseOption", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TBoolOption.html#ParseOption"},
     {"title": "PasDoc_OptionParser.TBoolOption.TurnedOn", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TBoolOption.html#TurnedOn"},
     {"title": "PasDoc_OptionParser.TValueOption", "text": " base class for all options that take one or more values of the form --option=value or --option value etc   ", "tags": "", "url": "PasDoc_OptionParser.TValueOption.html"},
     {"title": "PasDoc_OptionParser.TValueOption.CheckValue", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TValueOption.html#CheckValue"},
     {"title": "PasDoc_OptionParser.TValueOption.ParseOption", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TValueOption.html#ParseOption"},
     {"title": "PasDoc_OptionParser.TIntegerOption", "text": " accepts only integers   ", "tags": "", "url": "PasDoc_OptionParser.TIntegerOption.html"},
     {"title": "PasDoc_OptionParser.TIntegerOption.FValue", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TIntegerOption.html#FValue"},
     {"title": "PasDoc_OptionParser.TIntegerOption.CheckValue", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TIntegerOption.html#CheckValue"},
     {"title": "PasDoc_OptionParser.TIntegerOption.Value", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TIntegerOption.html#Value"},
     {"title": "PasDoc_OptionParser.TStringOption", "text": " accepts a single string   ", "tags": "", "url": "PasDoc_OptionParser.TStringOption.html"},
     {"title": "PasDoc_OptionParser.TStringOption.FValue", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TStringOption.html#FValue"},
     {"title": "PasDoc_OptionParser.TStringOption.CheckValue", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TStringOption.html#CheckValue"},
     {"title": "PasDoc_OptionParser.TStringOption.Value", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TStringOption.html#Value"},
     {"title": "PasDoc_OptionParser.TStringOptionList", "text": " accepts multiple strings and collates them even if the option itself is specified more than one time   ", "tags": "", "url": "PasDoc_OptionParser.TStringOptionList.html"},
     {"title": "PasDoc_OptionParser.TStringOptionList.FValues", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TStringOptionList.html#FValues"},
     {"title": "PasDoc_OptionParser.TStringOptionList.CheckValue", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TStringOptionList.html#CheckValue"},
     {"title": "PasDoc_OptionParser.TStringOptionList.CreateEx", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TStringOptionList.html#CreateEx"},
     {"title": "PasDoc_OptionParser.TStringOptionList.Destroy", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TStringOptionList.html#Destroy"},
     {"title": "PasDoc_OptionParser.TStringOptionList.Values", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TStringOptionList.html#Values"},
     {"title": "PasDoc_OptionParser.TPathListOption", "text": " accepts multiple strings paths and collates them even if the option itself is specified more than one time. Paths in a single option can be separated by the DirectorySeparator   ", "tags": "", "url": "PasDoc_OptionParser.TPathListOption.html"},
     {"title": "PasDoc_OptionParser.TPathListOption.CheckValue", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TPathListOption.html#CheckValue"},
     {"title": "PasDoc_OptionParser.TSetOption", "text": " Values must not have a + or - sign as the last character as that can be used to add/remove items from the default set, specifying items without +/- at the end clears the default and uses only specified items   ", "tags": "", "url": "PasDoc_OptionParser.TSetOption.html"},
     {"title": "PasDoc_OptionParser.TSetOption.FPossibleValues", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TSetOption.html#FPossibleValues"},
     {"title": "PasDoc_OptionParser.TSetOption.FValues", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TSetOption.html#FValues"},
     {"title": "PasDoc_OptionParser.TSetOption.GetPossibleValues", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TSetOption.html#GetPossibleValues"},
     {"title": "PasDoc_OptionParser.TSetOption.SetPossibleValues", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TSetOption.html#SetPossibleValues"},
     {"title": "PasDoc_OptionParser.TSetOption.CheckValue", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TSetOption.html#CheckValue"},
     {"title": "PasDoc_OptionParser.TSetOption.GetValues", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TSetOption.html#GetValues"},
     {"title": "PasDoc_OptionParser.TSetOption.SetValues", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TSetOption.html#SetValues"},
     {"title": "PasDoc_OptionParser.TSetOption.CreateEx", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TSetOption.html#CreateEx"},
     {"title": "PasDoc_OptionParser.TSetOption.Destroy", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TSetOption.html#Destroy"},
     {"title": "PasDoc_OptionParser.TSetOption.HasValue", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TSetOption.html#HasValue"},
     {"title": "PasDoc_OptionParser.TSetOption.PossibleValues", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TSetOption.html#PossibleValues"},
     {"title": "PasDoc_OptionParser.TSetOption.Values", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TSetOption.html#Values"},
     {"title": "PasDoc_OptionParser.TOptionParser", "text": " This class is the main parsing class, although a lot of parsing is handled by TOption and its descendants instead.   ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html"},
     {"title": "PasDoc_OptionParser.TOptionParser.FParams", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#FParams"},
     {"title": "PasDoc_OptionParser.TOptionParser.FOptions", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#FOptions"},
     {"title": "PasDoc_OptionParser.TOptionParser.FLeftList", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#FLeftList"},
     {"title": "PasDoc_OptionParser.TOptionParser.FShortOptionChar", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#FShortOptionChar"},
     {"title": "PasDoc_OptionParser.TOptionParser.FLongOptionString", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#FLongOptionString"},
     {"title": "PasDoc_OptionParser.TOptionParser.FIncludeFileOptionName", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#FIncludeFileOptionName"},
     {"title": "PasDoc_OptionParser.TOptionParser.FIncludeFileOptionExpl", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#FIncludeFileOptionExpl"},
     {"title": "PasDoc_OptionParser.TOptionParser.GetOption", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#GetOption"},
     {"title": "PasDoc_OptionParser.TOptionParser.GetOptionsCount", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#GetOptionsCount"},
     {"title": "PasDoc_OptionParser.TOptionParser.GetOptionByLongName", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#GetOptionByLongName"},
     {"title": "PasDoc_OptionParser.TOptionParser.GetOptionByShortname", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#GetOptionByShortname"},
     {"title": "PasDoc_OptionParser.TOptionParser.Create", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#Create"},
     {"title": "PasDoc_OptionParser.TOptionParser.CreateParams", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#CreateParams"},
     {"title": "PasDoc_OptionParser.TOptionParser.Destroy", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#Destroy"},
     {"title": "PasDoc_OptionParser.TOptionParser.AddOption", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#AddOption"},
     {"title": "PasDoc_OptionParser.TOptionParser.ParseOptions", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#ParseOptions"},
     {"title": "PasDoc_OptionParser.TOptionParser.WriteExplanations", "text": "    ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#WriteExplanations"},
     {"title": "PasDoc_OptionParser.TOptionParser.LeftList", "text": " Includes options that didn't accept their value and non-options like filenames specified on the command line   ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#LeftList"},
     {"title": "PasDoc_OptionParser.TOptionParser.OptionsCount", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#OptionsCount"},
     {"title": "PasDoc_OptionParser.TOptionParser.Options", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#Options"},
     {"title": "PasDoc_OptionParser.TOptionParser.ByName", "text": " Case sensitivity of the options is taken into account!   ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#ByName"},
     {"title": "PasDoc_OptionParser.TOptionParser.ByShortName", "text": " Case sensitivity of the options is taken into account!   ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#ByShortName"},
     {"title": "PasDoc_OptionParser.TOptionParser.ShortOptionStart", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#ShortOptionStart"},
     {"title": "PasDoc_OptionParser.TOptionParser.LongOptionStart", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#LongOptionStart"},
     {"title": "PasDoc_OptionParser.TOptionParser.IncludeFileOptionName", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#IncludeFileOptionName"},
     {"title": "PasDoc_OptionParser.TOptionParser.IncludeFileOptionExpl", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.TOptionParser.html#IncludeFileOptionExpl"},
     {"title": "PasDoc_OptionParser.DefShortOptionChar", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.html#DefShortOptionChar"},
     {"title": "PasDoc_OptionParser.DefLongOptionString", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.html#DefLongOptionString"},
     {"title": "PasDoc_OptionParser.OptionFileChar", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.html#OptionFileChar"},
     {"title": "PasDoc_OptionParser.CfgMacroCfgPath", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.html#CfgMacroCfgPath"},
     {"title": "PasDoc_OptionParser.OptionIndent", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.html#OptionIndent"},
     {"title": "PasDoc_OptionParser.OptionSep", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.html#OptionSep"},
     {"title": "PasDoc_OptionParser.ConsoleWidth", "text": "   ", "tags": "", "url": "PasDoc_OptionParser.html#ConsoleWidth"},
     {"title": "PasDoc_Parser", "text": "       Contains the TParser object, which can parse an ObjectPascal code, and put the collected information into the TPasUnit instance. Ralf Junker (delphi@zeitungsjunge.de) Marco Schmidt (marcoschmidt@geocities.com) Johannes Berg  Michalis Kamburelis Arno Garrels   Ralf Junker (delphi@zeitungsjunge.de) Marco Schmidt (marcoschmidt@geocities.com) Johannes Berg  Michalis Kamburelis Arno Garrels   Ralf Junker (delphi@zeitungsjunge.de) Marco Schmidt (marcoschmidt@geocities.com) Johannes Berg  Michalis Kamburelis Arno Garrels  ", "tags": "", "url": "PasDoc_Parser.html"},
     {"title": "PasDoc_Parser.EInternalParserError", "text": "   ", "tags": "", "url": "PasDoc_Parser.EInternalParserError.html"},
     {"title": "PasDoc_Parser.TPasCioHelper", "text": "   ", "tags": "", "url": "PasDoc_Parser.TPasCioHelper.html"},
     {"title": "PasDoc_Parser.TPasCioHelper.FreeAll", "text": " Objects are not owned by default.    ", "tags": "", "url": "PasDoc_Parser.TPasCioHelper.html#FreeAll"},
     {"title": "PasDoc_Parser.TPasCioHelper.Cio", "text": "   ", "tags": "", "url": "PasDoc_Parser.TPasCioHelper.html#Cio"},
     {"title": "PasDoc_Parser.TPasCioHelper.CurVisibility", "text": "   ", "tags": "", "url": "PasDoc_Parser.TPasCioHelper.html#CurVisibility"},
     {"title": "PasDoc_Parser.TPasCioHelper.Mode", "text": "   ", "tags": "", "url": "PasDoc_Parser.TPasCioHelper.html#Mode"},
     {"title": "PasDoc_Parser.TPasCioHelper.SkipCioDecl", "text": "   ", "tags": "", "url": "PasDoc_Parser.TPasCioHelper.html#SkipCioDecl"},
     {"title": "PasDoc_Parser.TPasCioHelperStack", "text": "   ", "tags": "", "url": "PasDoc_Parser.TPasCioHelperStack.html"},
     {"title": "PasDoc_Parser.TPasCioHelperStack.Clear", "text": "    ", "tags": "", "url": "PasDoc_Parser.TPasCioHelperStack.html#Clear"},
     {"title": "PasDoc_Parser.TPasCioHelperStack.Push", "text": "    ", "tags": "", "url": "PasDoc_Parser.TPasCioHelperStack.html#Push"},
     {"title": "PasDoc_Parser.TPasCioHelperStack.Pop", "text": "    ", "tags": "", "url": "PasDoc_Parser.TPasCioHelperStack.html#Pop"},
     {"title": "PasDoc_Parser.TPasCioHelperStack.Peek", "text": "    ", "tags": "", "url": "PasDoc_Parser.TPasCioHelperStack.html#Peek"},
     {"title": "PasDoc_Parser.TRawDescriptionInfoList", "text": " It is modelled after TStringList but has only the minimum number of methods required for use in PasDoc.   ", "tags": "", "url": "PasDoc_Parser.TRawDescriptionInfoList.html"},
     {"title": "PasDoc_Parser.TRawDescriptionInfoList.Append", "text": "    ", "tags": "", "url": "PasDoc_Parser.TRawDescriptionInfoList.html#Append"},
     {"title": "PasDoc_Parser.TRawDescriptionInfoList.Create", "text": "    ", "tags": "", "url": "PasDoc_Parser.TRawDescriptionInfoList.html#Create"},
     {"title": "PasDoc_Parser.TRawDescriptionInfoList.Count", "text": "   ", "tags": "", "url": "PasDoc_Parser.TRawDescriptionInfoList.html#Count"},
     {"title": "PasDoc_Parser.TRawDescriptionInfoList.Items", "text": "   ", "tags": "", "url": "PasDoc_Parser.TRawDescriptionInfoList.html#Items"},
     {"title": "PasDoc_Parser.TParser", "text": " When creating this object constructor Create takes as an argument an input stream and a list of directives. Parsing work is done by calling ParseUnitOrProgram method. If no errors appear, should return a TPasUnit object with all information on the unit. Else exception is raised.  Things that parser inits in items it returns:       Of every TPasItem : Name, RawDescription, Visibility, HintDirectives, DeprecatedNote, FullDeclararation (note: for now not all items get sensible FullDeclararation, but the intention is to improve this over time; see TPasItem.FullDeclaration to know where FullDeclararation is available now).  Note to IsDeprecated: parser inits it basing on hint directive &quot;deprecated&quot; presence in source file; it doesn't handle the fact that @deprecated tag may be specified inside RawDescription.  Note to RawDescription: parser inits them from user's comments that preceded given item in source file. It doesn't handle the fact that @member and @value tags may also assign RawDescription for some item.   Of TPasCio: Ancestors, Fields, Methods, Properties, MyType.   Of TPasEnum: Members, FullDeclararation.   Of TPasMethod: What.   Of TPasVarConst: FullDeclaration.   Of TPasProperty: IndexDecl, FullDeclaration. PropType (only if was specified in property declaration). It was intended that parser will also set Default, NoDefault, StoredId, DefaultId, Reader, Writer attributes, but it's still not implemented.   Of TPasUnit; UsesUnits, Types, Variables, CIOs, Constants, FuncsProcs.     It doesn't init other values. E.g. AbstractDescription or DetailedDescription of TPasItem should be inited while expanding this item's tags. E.g. SourceFileDateTime and SourceFileName of TPasUnit must be set by other means.   ", "tags": "", "url": "PasDoc_Parser.TParser.html"},
     {"title": "PasDoc_Parser.TParser.Create", "text": " All strings in SD are defined compiler directives.    ", "tags": "", "url": "PasDoc_Parser.TParser.html#Create"},
     {"title": "PasDoc_Parser.TParser.Destroy", "text": "    ", "tags": "", "url": "PasDoc_Parser.TParser.html#Destroy"},
     {"title": "PasDoc_Parser.TParser.ParseUnitOrProgram", "text": "    ", "tags": "", "url": "PasDoc_Parser.TParser.html#ParseUnitOrProgram"},
     {"title": "PasDoc_Parser.TParser.OnMessage", "text": "   ", "tags": "", "url": "PasDoc_Parser.TParser.html#OnMessage"},
     {"title": "PasDoc_Parser.TParser.CommentMarkers", "text": "   ", "tags": "", "url": "PasDoc_Parser.TParser.html#CommentMarkers"},
     {"title": "PasDoc_Parser.TParser.MarkersOptional", "text": "   ", "tags": "", "url": "PasDoc_Parser.TParser.html#MarkersOptional"},
     {"title": "PasDoc_Parser.TParser.IgnoreLeading", "text": "   ", "tags": "", "url": "PasDoc_Parser.TParser.html#IgnoreLeading"},
     {"title": "PasDoc_Parser.TParser.IgnoreMarkers", "text": "   ", "tags": "", "url": "PasDoc_Parser.TParser.html#IgnoreMarkers"},
     {"title": "PasDoc_Parser.TParser.ShowVisibilities", "text": "   ", "tags": "", "url": "PasDoc_Parser.TParser.html#ShowVisibilities"},
     {"title": "PasDoc_Parser.TParser.ImplicitVisibility", "text": "   ", "tags": "", "url": "PasDoc_Parser.TParser.html#ImplicitVisibility"},
     {"title": "PasDoc_Parser.TParser.AutoBackComments", "text": "   ", "tags": "", "url": "PasDoc_Parser.TParser.html#AutoBackComments"},
     {"title": "PasDoc_Parser.TParser.InfoMergeType", "text": "   ", "tags": "", "url": "PasDoc_Parser.TParser.html#InfoMergeType"},
     {"title": "PasDoc_Parser.TItemParseMode", "text": "    pmUndefined    pmConst    pmVar    pmType   ", "tags": "", "url": "PasDoc_Parser.html#TItemParseMode"},
     {"title": "PasDoc_Parser.TOwnerItemType", "text": "    otUnit    otCio   ", "tags": "", "url": "PasDoc_Parser.html#TOwnerItemType"},
     {"title": "PasDoc_ProcessLineTalk", "text": "   Michalis Kamburelis Arno Garrels   Michalis Kamburelis Arno Garrels   Michalis Kamburelis Arno Garrels  ", "tags": "", "url": "PasDoc_ProcessLineTalk.html"},
     {"title": "PasDoc_ProcessLineTalk.TTextReader", "text": " Lines may be terminated in Stream with #13, #10, #13+#10 or #10+#13. This way I can treat any TStream quite like standard Pascal text files: I have simple Readln method.  After calling Readln or Eof you should STOP directly using underlying Stream (but you CAN use Stream right after creating TTextReader.Create(Stream) and before any Readln or Eof operations on this TTextReader).  Original version of this class comes from Michalis Kamburelis code library, see [http://www.camelot.homedns.org/&tilde;michalis/], unit base/KambiClassUtils.pas.   ", "tags": "", "url": "PasDoc_ProcessLineTalk.TTextReader.html"},
     {"title": "PasDoc_ProcessLineTalk.TTextReader.CreateFromFileStream", "text": "    ", "tags": "", "url": "PasDoc_ProcessLineTalk.TTextReader.html#CreateFromFileStream"},
     {"title": "PasDoc_ProcessLineTalk.TTextReader.Create", "text": "    ", "tags": "", "url": "PasDoc_ProcessLineTalk.TTextReader.html#Create"},
     {"title": "PasDoc_ProcessLineTalk.TTextReader.Destroy", "text": "    ", "tags": "", "url": "PasDoc_ProcessLineTalk.TTextReader.html#Destroy"},
     {"title": "PasDoc_ProcessLineTalk.TTextReader.Readln", "text": " Returned string does not contain any end-of-line characters.    ", "tags": "", "url": "PasDoc_ProcessLineTalk.TTextReader.html#Readln"},
     {"title": "PasDoc_ProcessLineTalk.TTextReader.Eof", "text": "    ", "tags": "", "url": "PasDoc_ProcessLineTalk.TTextReader.html#Eof"},
     {"title": "PasDoc_ProcessLineTalk.TProcessLineTalk", "text": "  If symbol HAS_PROCESS is not defined, this defines a junky implementation of TProcessLineTalk class that can't do anything and raises exception when you try to execute a process.   ", "tags": "", "url": "PasDoc_ProcessLineTalk.TProcessLineTalk.html"},
     {"title": "PasDoc_ProcessLineTalk.TProcessLineTalk.Execute", "text": "    ", "tags": "", "url": "PasDoc_ProcessLineTalk.TProcessLineTalk.html#Execute"},
     {"title": "PasDoc_ProcessLineTalk.TProcessLineTalk.WriteLine", "text": "    ", "tags": "", "url": "PasDoc_ProcessLineTalk.TProcessLineTalk.html#WriteLine"},
     {"title": "PasDoc_ProcessLineTalk.TProcessLineTalk.ReadLine", "text": "    ", "tags": "", "url": "PasDoc_ProcessLineTalk.TProcessLineTalk.html#ReadLine"},
     {"title": "PasDoc_ProcessLineTalk.TProcessLineTalk.Create", "text": "    ", "tags": "", "url": "PasDoc_ProcessLineTalk.TProcessLineTalk.html#Create"},
     {"title": "PasDoc_ProcessLineTalk.TProcessLineTalk.Destroy", "text": "    ", "tags": "", "url": "PasDoc_ProcessLineTalk.TProcessLineTalk.html#Destroy"},
     {"title": "PasDoc_ProcessLineTalk.TProcessLineTalk.CommandLine", "text": "   ", "tags": "", "url": "PasDoc_ProcessLineTalk.TProcessLineTalk.html#CommandLine"},
     {"title": "PasDoc_ProcessLineTalk.TProcessLineTalk.Executable", "text": "   ", "tags": "", "url": "PasDoc_ProcessLineTalk.TProcessLineTalk.html#Executable"},
     {"title": "PasDoc_ProcessLineTalk.TProcessLineTalk.Parameters", "text": "   ", "tags": "", "url": "PasDoc_ProcessLineTalk.TProcessLineTalk.html#Parameters"},
     {"title": "PasDoc_Reg", "text": "     TODO: We have some properties in TPasDoc and generators components that should be registered with filename editors. Ralf Junker (delphi@zeitungsjunge.de) Johannes Berg  Michalis Kamburelis  Ralf Junker (delphi@zeitungsjunge.de) Johannes Berg  Michalis Kamburelis  Ralf Junker (delphi@zeitungsjunge.de) Johannes Berg  Michalis Kamburelis ", "tags": "", "url": "PasDoc_Reg.html"},
     {"title": "PasDoc_Reg.Register", "text": "    ", "tags": "", "url": "PasDoc_Reg.html#Register"},
     {"title": "PasDoc_Scanner", "text": "        The scanner object TScanner returns tokens from a Pascal language character input stream. It uses the PasDoc_Tokenizer unit to get tokens, regarding conditional directives that might lead to including another files or will add or delete conditional symbols. Also handles FPC macros (when HandleMacros is true). So, this scanner is a combined tokenizer and pre-processor. Johannes Berg  Ralf Junker (delphi@zeitungsjunge.de) Marco Schmidt (marcoschmidt@geocities.com) Michalis Kamburelis Arno Garrels   Johannes Berg  Ralf Junker (delphi@zeitungsjunge.de) Marco Schmidt (marcoschmidt@geocities.com) Michalis Kamburelis Arno Garrels   Johannes Berg  Ralf Junker (delphi@zeitungsjunge.de) Marco Schmidt (marcoschmidt@geocities.com) Michalis Kamburelis Arno Garrels  ", "tags": "", "url": "PasDoc_Scanner.html"},
     {"title": "PasDoc_Scanner.ETokenizerStreamEnd", "text": "   ", "tags": "", "url": "PasDoc_Scanner.ETokenizerStreamEnd.html"},
     {"title": "PasDoc_Scanner.EInvalidIfCondition", "text": "   ", "tags": "", "url": "PasDoc_Scanner.EInvalidIfCondition.html"},
     {"title": "PasDoc_Scanner.TScanner", "text": "   ", "tags": "", "url": "PasDoc_Scanner.TScanner.html"},
     {"title": "PasDoc_Scanner.TScanner.DoError", "text": "    ", "tags": "", "url": "PasDoc_Scanner.TScanner.html#DoError"},
     {"title": "PasDoc_Scanner.TScanner.DoMessage", "text": "    ", "tags": "", "url": "PasDoc_Scanner.TScanner.html#DoMessage"},
     {"title": "PasDoc_Scanner.TScanner.Create", "text": "  Note that the stream S will be freed by this object (at destruction or when we will read all it's tokens), so after creating TScanner you should leave the stream to be managed completely by this TScanner.    ", "tags": "", "url": "PasDoc_Scanner.TScanner.html#Create"},
     {"title": "PasDoc_Scanner.TScanner.Destroy", "text": "    ", "tags": "", "url": "PasDoc_Scanner.TScanner.html#Destroy"},
     {"title": "PasDoc_Scanner.TScanner.AddSymbol", "text": "    ", "tags": "", "url": "PasDoc_Scanner.TScanner.html#AddSymbol"},
     {"title": "PasDoc_Scanner.TScanner.AddSymbols", "text": "    ", "tags": "", "url": "PasDoc_Scanner.TScanner.html#AddSymbols"},
     {"title": "PasDoc_Scanner.TScanner.AddMacro", "text": "    ", "tags": "", "url": "PasDoc_Scanner.TScanner.html#AddMacro"},
     {"title": "PasDoc_Scanner.TScanner.ConsumeToken", "text": "    ", "tags": "", "url": "PasDoc_Scanner.TScanner.html#ConsumeToken"},
     {"title": "PasDoc_Scanner.TScanner.GetToken", "text": " Always non-nil (will raise exception in case of any problem).    ", "tags": "", "url": "PasDoc_Scanner.TScanner.html#GetToken"},
     {"title": "PasDoc_Scanner.TScanner.GetStreamInfo", "text": " Good for meaningful error messages.    ", "tags": "", "url": "PasDoc_Scanner.TScanner.html#GetStreamInfo"},
     {"title": "PasDoc_Scanner.TScanner.PeekToken", "text": "    ", "tags": "", "url": "PasDoc_Scanner.TScanner.html#PeekToken"},
     {"title": "PasDoc_Scanner.TScanner.UnGetToken", "text": " Next time you will call GetToken you will get T. This also sets T to nil (because you shouldn't free T anymore after ungetting it). Note that the buffer has room only for 1 token, so you have to make sure that you will never unget more than two tokens. Practically, always call UnGetToken right after some GetToken.    ", "tags": "", "url": "PasDoc_Scanner.TScanner.html#UnGetToken"},
     {"title": "PasDoc_Scanner.TScanner.IncludeFilePaths", "text": " When you assign something to this property it causes Assign(Value) call, not a real reference copy.   ", "tags": "", "url": "PasDoc_Scanner.TScanner.html#IncludeFilePaths"},
     {"title": "PasDoc_Scanner.TScanner.OnMessage", "text": "   ", "tags": "", "url": "PasDoc_Scanner.TScanner.html#OnMessage"},
     {"title": "PasDoc_Scanner.TScanner.Verbosity", "text": "   ", "tags": "", "url": "PasDoc_Scanner.TScanner.html#Verbosity"},
     {"title": "PasDoc_Scanner.TScanner.SwitchOptions", "text": "   ", "tags": "", "url": "PasDoc_Scanner.TScanner.html#SwitchOptions"},
     {"title": "PasDoc_Scanner.TScanner.HandleMacros", "text": "   ", "tags": "", "url": "PasDoc_Scanner.TScanner.html#HandleMacros"},
     {"title": "PasDoc_Scanner.MAX_TOKENIZERS", "text": "   ", "tags": "", "url": "PasDoc_Scanner.html#MAX_TOKENIZERS"},
     {"title": "PasDoc_Scanner.TUpperCaseLetter", "text": "   ", "tags": "", "url": "PasDoc_Scanner.html#TUpperCaseLetter"},
     {"title": "PasDoc_Scanner.TSwitchOptions", "text": "   ", "tags": "", "url": "PasDoc_Scanner.html#TSwitchOptions"},
     {"title": "PasDoc_Scanner.TDirectiveType", "text": "    DT_UNKNOWN    DT_DEFINE    DT_ELSE    DT_ENDIF    DT_IFDEF    DT_IFNDEF    DT_IFOPT    DT_INCLUDE_FILE    DT_UNDEF    DT_INCLUDE_FILE_2    DT_IF    DT_ELSEIF    DT_IFEND   ", "tags": "", "url": "PasDoc_Scanner.html#TDirectiveType"},
     {"title": "PasDoc_Serialize", "text": "  Arno Garrels   Arno Garrels   Arno Garrels  ", "tags": "", "url": "PasDoc_Serialize.html"},
     {"title": "PasDoc_Serialize.EInvalidCacheFileVersion", "text": "   ", "tags": "", "url": "PasDoc_Serialize.EInvalidCacheFileVersion.html"},
     {"title": "PasDoc_Serialize.TSerializable", "text": "   ", "tags": "", "url": "PasDoc_Serialize.TSerializable.html"},
     {"title": "PasDoc_Serialize.TSerializable.Serialize", "text": "    ", "tags": "", "url": "PasDoc_Serialize.TSerializable.html#Serialize"},
     {"title": "PasDoc_Serialize.TSerializable.Deserialize", "text": "    ", "tags": "", "url": "PasDoc_Serialize.TSerializable.html#Deserialize"},
     {"title": "PasDoc_Serialize.TSerializable.Read7BitEncodedInt", "text": "    ", "tags": "", "url": "PasDoc_Serialize.TSerializable.html#Read7BitEncodedInt"},
     {"title": "PasDoc_Serialize.TSerializable.Write7BitEncodedInt", "text": "    ", "tags": "", "url": "PasDoc_Serialize.TSerializable.html#Write7BitEncodedInt"},
     {"title": "PasDoc_Serialize.TSerializable.LoadStringFromStream", "text": "    ", "tags": "", "url": "PasDoc_Serialize.TSerializable.html#LoadStringFromStream"},
     {"title": "PasDoc_Serialize.TSerializable.SaveStringToStream", "text": "    ", "tags": "", "url": "PasDoc_Serialize.TSerializable.html#SaveStringToStream"},
     {"title": "PasDoc_Serialize.TSerializable.LoadDoubleFromStream", "text": "    ", "tags": "", "url": "PasDoc_Serialize.TSerializable.html#LoadDoubleFromStream"},
     {"title": "PasDoc_Serialize.TSerializable.SaveDoubleToStream", "text": "    ", "tags": "", "url": "PasDoc_Serialize.TSerializable.html#SaveDoubleToStream"},
     {"title": "PasDoc_Serialize.TSerializable.LoadIntegerFromStream", "text": "    ", "tags": "", "url": "PasDoc_Serialize.TSerializable.html#LoadIntegerFromStream"},
     {"title": "PasDoc_Serialize.TSerializable.SaveIntegerToStream", "text": "    ", "tags": "", "url": "PasDoc_Serialize.TSerializable.html#SaveIntegerToStream"},
     {"title": "PasDoc_Serialize.TSerializable.Create", "text": "    ", "tags": "", "url": "PasDoc_Serialize.TSerializable.html#Create"},
     {"title": "PasDoc_Serialize.TSerializable.SerializeObject", "text": "    ", "tags": "", "url": "PasDoc_Serialize.TSerializable.html#SerializeObject"},
     {"title": "PasDoc_Serialize.TSerializable.DeserializeObject", "text": "    ", "tags": "", "url": "PasDoc_Serialize.TSerializable.html#DeserializeObject"},
     {"title": "PasDoc_Serialize.TSerializable.Register", "text": "    ", "tags": "", "url": "PasDoc_Serialize.TSerializable.html#Register"},
     {"title": "PasDoc_Serialize.TSerializable.SerializeToFile", "text": "    ", "tags": "", "url": "PasDoc_Serialize.TSerializable.html#SerializeToFile"},
     {"title": "PasDoc_Serialize.TSerializable.DeserializeFromFile", "text": "    EInvalidCacheFileVersion When the cached file contents are from an old pasdoc version (or invalid). ", "tags": "", "url": "PasDoc_Serialize.TSerializable.html#DeserializeFromFile"},
     {"title": "PasDoc_Serialize.TSerializable.WasDeserialized", "text": "   ", "tags": "", "url": "PasDoc_Serialize.TSerializable.html#WasDeserialized"},
     {"title": "PasDoc_Serialize.ESerializedException", "text": "   ", "tags": "", "url": "PasDoc_Serialize.ESerializedException.html"},
     {"title": "PasDoc_Serialize.TSerializableClass", "text": "   ", "tags": "", "url": "PasDoc_Serialize.html#TSerializableClass"},
     {"title": "PasDoc_SortSettings", "text": "   ", "tags": "", "url": "PasDoc_SortSettings.html"},
     {"title": "PasDoc_SortSettings.EInvalidSortSetting", "text": "   ", "tags": "", "url": "PasDoc_SortSettings.EInvalidSortSetting.html"},
     {"title": "PasDoc_SortSettings.AllSortSettings", "text": "   ", "tags": "", "url": "PasDoc_SortSettings.html#AllSortSettings"},
     {"title": "PasDoc_SortSettings.SortSettingNames", "text": " Used in SortSettingsToName, SortSettingFromName.   ", "tags": "", "url": "PasDoc_SortSettings.html#SortSettingNames"},
     {"title": "PasDoc_SortSettings.SortSettingFromName", "text": "   EInvalidSortSetting if ASortSettingName does not match (case ignored) to any SortSettingNames. ", "tags": "", "url": "PasDoc_SortSettings.html#SortSettingFromName"},
     {"title": "PasDoc_SortSettings.SortSettingsToName", "text": "    ", "tags": "", "url": "PasDoc_SortSettings.html#SortSettingsToName"},
     {"title": "PasDoc_SortSettings.TSortSetting", "text": "    ssCIOs    ssConstants    ssFuncsProcs    ssTypes    ssVariables    ssUsesClauses    ssRecordFields    ssNonRecordFields    ssMethods    ssProperties   ", "tags": "", "url": "PasDoc_SortSettings.html#TSortSetting"},
     {"title": "PasDoc_SortSettings.TSortSettings", "text": "   ", "tags": "", "url": "PasDoc_SortSettings.html#TSortSettings"},
     {"title": "PasDoc_StreamUtils", "text": "   TBufferedStream, TStreamReader and TStreamWriter by Arno Garrels. Johannes Berg  Arno Garrels   Johannes Berg  Arno Garrels   Johannes Berg  Arno Garrels  ", "tags": "", "url": "PasDoc_StreamUtils.html"},
     {"title": "PasDoc_StreamUtils.TBufferedStream", "text": "   ", "tags": "", "url": "PasDoc_StreamUtils.TBufferedStream.html"},
     {"title": "PasDoc_StreamUtils.TBufferedStream.SetIsReadOnly", "text": "    ", "tags": "", "url": "PasDoc_StreamUtils.TBufferedStream.html#SetIsReadOnly"},
     {"title": "PasDoc_StreamUtils.TBufferedStream.SetSize", "text": "    ", "tags": "", "url": "PasDoc_StreamUtils.TBufferedStream.html#SetSize"},
     {"title": "PasDoc_StreamUtils.TBufferedStream.SetSize", "text": "    ", "tags": "", "url": "PasDoc_StreamUtils.TBufferedStream.html#SetSize"},
     {"title": "PasDoc_StreamUtils.TBufferedStream.InternalGetSize", "text": "    ", "tags": "", "url": "PasDoc_StreamUtils.TBufferedStream.html#InternalGetSize"},
     {"title": "PasDoc_StreamUtils.TBufferedStream.GetSize", "text": "    ", "tags": "", "url": "PasDoc_StreamUtils.TBufferedStream.html#GetSize"},
     {"title": "PasDoc_StreamUtils.TBufferedStream.Init", "text": "    ", "tags": "", "url": "PasDoc_StreamUtils.TBufferedStream.html#Init"},
     {"title": "PasDoc_StreamUtils.TBufferedStream.FillBuffer", "text": "    ", "tags": "", "url": "PasDoc_StreamUtils.TBufferedStream.html#FillBuffer"},
     {"title": "PasDoc_StreamUtils.TBufferedStream.Create", "text": "    ", "tags": "", "url": "PasDoc_StreamUtils.TBufferedStream.html#Create"},
     {"title": "PasDoc_StreamUtils.TBufferedStream.Create", "text": "    ", "tags": "", "url": "PasDoc_StreamUtils.TBufferedStream.html#Create"},
     {"title": "PasDoc_StreamUtils.TBufferedStream.Create", "text": "    ", "tags": "", "url": "PasDoc_StreamUtils.TBufferedStream.html#Create"},
     {"title": "PasDoc_StreamUtils.TBufferedStream.Destroy", "text": "    ", "tags": "", "url": "PasDoc_StreamUtils.TBufferedStream.html#Destroy"},
     {"title": "PasDoc_StreamUtils.TBufferedStream.Flush", "text": "    ", "tags": "", "url": "PasDoc_StreamUtils.TBufferedStream.html#Flush"},
     {"title": "PasDoc_StreamUtils.TBufferedStream.Read", "text": "    ", "tags": "", "url": "PasDoc_StreamUtils.TBufferedStream.html#Read"},
     {"title": "PasDoc_StreamUtils.TBufferedStream.Seek", "text": "    ", "tags": "", "url": "PasDoc_StreamUtils.TBufferedStream.html#Seek"},
     {"title": "PasDoc_StreamUtils.TBufferedStream.Seek", "text": "    ", "tags": "", "url": "PasDoc_StreamUtils.TBufferedStream.html#Seek"},
     {"title": "PasDoc_StreamUtils.TBufferedStream.Write", "text": "    ", "tags": "", "url": "PasDoc_StreamUtils.TBufferedStream.html#Write"},
     {"title": "PasDoc_StreamUtils.TBufferedStream.IsReadOnly", "text": " IsReadOnly is set to TRUE if a constructor with filename is called with a read only mode and a share lock.   ", "tags": "", "url": "PasDoc_StreamUtils.TBufferedStream.html#IsReadOnly"},
     {"title": "PasDoc_StreamUtils.TBufferedStream.FastSize", "text": "   ", "tags": "", "url": "PasDoc_StreamUtils.TBufferedStream.html#FastSize"},
     {"title": "PasDoc_StreamUtils.DEFAULT_BUFSIZE", "text": "   ", "tags": "", "url": "PasDoc_StreamUtils.html#DEFAULT_BUFSIZE"},
     {"title": "PasDoc_StreamUtils.MIN_BUFSIZE", "text": "   ", "tags": "", "url": "PasDoc_StreamUtils.html#MIN_BUFSIZE"},
     {"title": "PasDoc_StreamUtils.MAX_BUFSIZE", "text": "   ", "tags": "", "url": "PasDoc_StreamUtils.html#MAX_BUFSIZE"},
     {"title": "PasDoc_StreamUtils.StreamReadLine", "text": "    ", "tags": "", "url": "PasDoc_StreamUtils.html#StreamReadLine"},
     {"title": "PasDoc_StreamUtils.StreamWriteLine", "text": "    ", "tags": "", "url": "PasDoc_StreamUtils.html#StreamWriteLine"},
     {"title": "PasDoc_StreamUtils.StreamWriteString", "text": "    ", "tags": "", "url": "PasDoc_StreamUtils.html#StreamWriteString"},
     {"title": "PasDoc_StringPairVector", "text": "   ", "tags": "", "url": "PasDoc_StringPairVector.html"},
     {"title": "PasDoc_StringPairVector.TStringPair", "text": "   ", "tags": "", "url": "PasDoc_StringPairVector.TStringPair.html"},
     {"title": "PasDoc_StringPairVector.TStringPair.Name", "text": "   ", "tags": "", "url": "PasDoc_StringPairVector.TStringPair.html#Name"},
     {"title": "PasDoc_StringPairVector.TStringPair.Value", "text": "   ", "tags": "", "url": "PasDoc_StringPairVector.TStringPair.html#Value"},
     {"title": "PasDoc_StringPairVector.TStringPair.Data", "text": "   ", "tags": "", "url": "PasDoc_StringPairVector.TStringPair.html#Data"},
     {"title": "PasDoc_StringPairVector.TStringPair.CreateExtractFirstWord", "text": "    ", "tags": "", "url": "PasDoc_StringPairVector.TStringPair.html#CreateExtractFirstWord"},
     {"title": "PasDoc_StringPairVector.TStringPair.Create", "text": "    ", "tags": "", "url": "PasDoc_StringPairVector.TStringPair.html#Create"},
     {"title": "PasDoc_StringPairVector.TStringPair.Create", "text": "    ", "tags": "", "url": "PasDoc_StringPairVector.TStringPair.html#Create"},
     {"title": "PasDoc_StringPairVector.TStringPairVector", "text": " This class contains only non-nil objects of class TStringPair.  Using this class instead of TStringList (with it's Name and Value properties) is often better, because this allows both Name and Value of each pair to safely contain any special characters (including '=' and newline markers). It's also faster, since it doesn't try to encode Name and Value into one string.   ", "tags": "", "url": "PasDoc_StringPairVector.TStringPairVector.html"},
     {"title": "PasDoc_StringPairVector.TStringPairVector.Text", "text": " For every item, string Name + NameValueSepapator + Value is constructed. Then all such strings for every items all concatenated with ItemSeparator.  Remember that the very idea of TStringPair and TStringPairVector is that Name and Value strings may contain any special characters, including things you give here as NameValueSepapator and ItemSeparator. So it's practically impossible to later convert such Text back to items and Names/Value pairs.    ", "tags": "", "url": "PasDoc_StringPairVector.TStringPairVector.html#Text"},
     {"title": "PasDoc_StringPairVector.TStringPairVector.FindName", "text": " Returns -1 if not found.    ", "tags": "", "url": "PasDoc_StringPairVector.TStringPairVector.html#FindName"},
     {"title": "PasDoc_StringPairVector.TStringPairVector.DeleteName", "text": " Returns if some pair was removed.    ", "tags": "", "url": "PasDoc_StringPairVector.TStringPairVector.html#DeleteName"},
     {"title": "PasDoc_StringPairVector.TStringPairVector.LoadFromBinaryStream", "text": " For each item, it's Name and Value are saved. (TStringPair.Data pointers are not saved.)    ", "tags": "", "url": "PasDoc_StringPairVector.TStringPairVector.html#LoadFromBinaryStream"},
     {"title": "PasDoc_StringPairVector.TStringPairVector.SaveToBinaryStream", "text": "    ", "tags": "", "url": "PasDoc_StringPairVector.TStringPairVector.html#SaveToBinaryStream"},
     {"title": "PasDoc_StringPairVector.TStringPairVector.FirstName", "text": "    ", "tags": "", "url": "PasDoc_StringPairVector.TStringPairVector.html#FirstName"},
     {"title": "PasDoc_StringPairVector.TStringPairVector.Items", "text": "   ", "tags": "", "url": "PasDoc_StringPairVector.TStringPairVector.html#Items"},
     {"title": "PasDoc_StringVector", "text": "   The string vector is based on TStringList and simply exports a few extra functions - I did this so I didn't have to change so much old code, this has only little additional functionality Johannes Berg  Michalis Kamburelis  Johannes Berg  Michalis Kamburelis  Johannes Berg  Michalis Kamburelis ", "tags": "", "url": "PasDoc_StringVector.html"},
     {"title": "PasDoc_StringVector.TStringVector", "text": "   ", "tags": "", "url": "PasDoc_StringVector.TStringVector.html"},
     {"title": "PasDoc_StringVector.TStringVector.FirstName", "text": "    ", "tags": "", "url": "PasDoc_StringVector.TStringVector.html#FirstName"},
     {"title": "PasDoc_StringVector.TStringVector.LoadFromTextFileAdd", "text": "    ", "tags": "", "url": "PasDoc_StringVector.TStringVector.html#LoadFromTextFileAdd"},
     {"title": "PasDoc_StringVector.TStringVector.LoadFromTextFileAdd", "text": "    ", "tags": "", "url": "PasDoc_StringVector.TStringVector.html#LoadFromTextFileAdd"},
     {"title": "PasDoc_StringVector.TStringVector.RemoveAllNamesCI", "text": "    ", "tags": "", "url": "PasDoc_StringVector.TStringVector.html#RemoveAllNamesCI"},
     {"title": "PasDoc_StringVector.TStringVector.ExistsNameCI", "text": "    ", "tags": "", "url": "PasDoc_StringVector.TStringVector.html#ExistsNameCI"},
     {"title": "PasDoc_StringVector.TStringVector.IsEmpty", "text": "    ", "tags": "", "url": "PasDoc_StringVector.TStringVector.html#IsEmpty"},
     {"title": "PasDoc_StringVector.TStringVector.AddNotExisting", "text": "    ", "tags": "", "url": "PasDoc_StringVector.TStringVector.html#AddNotExisting"},
     {"title": "PasDoc_StringVector.TStringVector.LoadFromBinaryStream", "text": "  The binary format is      Count   followed by each string, loaded using TSerializable.LoadStringFromStream.     Note that you should never use our Text value to load/save this object from/into a stream, like Text := TSerializable.LoadStringFromStream(Stream). Using and assigning to the Text value breaks when some strings have newlines inside that should be preserved.    ", "tags": "", "url": "PasDoc_StringVector.TStringVector.html#LoadFromBinaryStream"},
     {"title": "PasDoc_StringVector.TStringVector.SaveToBinaryStream", "text": "    ", "tags": "", "url": "PasDoc_StringVector.TStringVector.html#SaveToBinaryStream"},
     {"title": "PasDoc_StringVector.NewStringVector", "text": "    ", "tags": "", "url": "PasDoc_StringVector.html#NewStringVector"},
     {"title": "PasDoc_StringVector.IsEmpty", "text": "    ", "tags": "", "url": "PasDoc_StringVector.html#IsEmpty"},
     {"title": "PasDoc_TagManager", "text": "   ", "tags": "", "url": "PasDoc_TagManager.html"},
     {"title": "PasDoc_TagManager.TTag", "text": "   ", "tags": "", "url": "PasDoc_TagManager.TTag.html"},
     {"title": "PasDoc_TagManager.TTag.Create", "text": "    ", "tags": "", "url": "PasDoc_TagManager.TTag.html#Create"},
     {"title": "PasDoc_TagManager.TTag.PreExecute", "text": " In this class this simply calls OnPreExecute.    ", "tags": "", "url": "PasDoc_TagManager.TTag.html#PreExecute"},
     {"title": "PasDoc_TagManager.TTag.Execute", "text": "  EnclosingTag parameter specifies enclosing tag. This is useful for tags that must behave differently in different contexts, e.g. in plain-text output @item tag will behave differently inside @orderedList and @unorderedList. EnclosingTag is nil when the tag occured at top level of the description.  ThisTagData and EnclosingTagData form a mechanism to pass arbitraty data between child tags enclosed within one parent tag. Example uses:       This is the way for multiple @item tags inside @orderedList tag to count themselves (to provide list item numbers, for pasdoc output formats that can't automatically number list items).   This is the way for @itemSpacing tag to communicate with enclosing @orderedList tag to specify list style.    And this is the way for @cell tags to be collected inside rows data and then @rows tags to be collected inside table data. Thanks to such collecting TDocGenerator.FormatTable receives at once all information about given table, and can use it to format table.     How does this XxxTagData mechanism work:  When we start parsing parameter of some tag with toRecursiveTags, we create a new pointer inited to CreateOccurenceData. When @-tags occur inside this parameter, we pass them this pointer as EnclosingTagData (this way all @-tags with the same parent can use this pointer to communicate with each other). At the end, when parameter was parsed, we call given tag's Execute method passing the resulting pointer as ThisTagData (this way @-tags with the same parent can use this pointer to pass some data to their parent).  In this class this method simply calls OnExecute (if assigned).    ", "tags": "", "url": "PasDoc_TagManager.TTag.html#Execute"},
     {"title": "PasDoc_TagManager.TTag.AllowedInside", "text": " Given EnclosingTag is enclosing tag, nil if we're in top level. If this returns false then this tag will not be allowed inside EnclosingTag.  In this class this method       Assumes that Result = true if we're at top level or EnclosingTag.TagOptions contains toAllowOtherTagsInsideByDefault. Else it assumes Result = false.    Then it calls OnAllowedInside(Self, EnclosingTag, Result) (if OnAllowedInside is assigned).       ", "tags": "", "url": "PasDoc_TagManager.TTag.html#AllowedInside"},
     {"title": "PasDoc_TagManager.TTag.CreateOccurenceData", "text": "    ", "tags": "", "url": "PasDoc_TagManager.TTag.html#CreateOccurenceData"},
     {"title": "PasDoc_TagManager.TTag.DestroyOccurenceData", "text": "    ", "tags": "", "url": "PasDoc_TagManager.TTag.html#DestroyOccurenceData"},
     {"title": "PasDoc_TagManager.TTag.TagOptions", "text": "   ", "tags": "", "url": "PasDoc_TagManager.TTag.html#TagOptions"},
     {"title": "PasDoc_TagManager.TTag.TagManager", "text": " Note that the tag instance is owned by this tag manager (i.e. it will be freed inside this tag manager). It can be nil if no tag manager currently owns this tag.  Note that it's very useful in Execute or OnExecute implementations.  E.g. you can use it to report a message by TagManager.DoMessage(...), this is e.g. used by implementation of TPasItem.StoreAbstractTag.  You could also use this to manually force recursive behavior of a given tag. I.e let's suppose that you have a tag with TagOptions = [toParameterRequired], so the TagParameter parameter passed to handler was not recursively expanded. Then you can do inside your handler   NewTagParameter := TagManager.Execute(TagParameter, ...)   and this way you have explicitly recursively expanded the tag.  Scenario above is actually used in implementation of @noAutoLink tag. There I call TagManager.Execute with parameter AutoLink set to false thus preventing auto-linking inside text within @noAutoLink.   ", "tags": "", "url": "PasDoc_TagManager.TTag.html#TagManager"},
     {"title": "PasDoc_TagManager.TTag.Name", "text": " Value of this property must always be lowercase.   ", "tags": "", "url": "PasDoc_TagManager.TTag.html#Name"},
     {"title": "PasDoc_TagManager.TTag.OnPreExecute", "text": "   ", "tags": "", "url": "PasDoc_TagManager.TTag.html#OnPreExecute"},
     {"title": "PasDoc_TagManager.TTag.OnExecute", "text": "   ", "tags": "", "url": "PasDoc_TagManager.TTag.html#OnExecute"},
     {"title": "PasDoc_TagManager.TTag.OnAllowedInside", "text": "   ", "tags": "", "url": "PasDoc_TagManager.TTag.html#OnAllowedInside"},
     {"title": "PasDoc_TagManager.TTopLevelTag", "text": "   ", "tags": "", "url": "PasDoc_TagManager.TTopLevelTag.html"},
     {"title": "PasDoc_TagManager.TTopLevelTag.AllowedInside", "text": "  Which means that this tag is allowed only at top level of description, never inside parameter of some tag.    ", "tags": "", "url": "PasDoc_TagManager.TTopLevelTag.html#AllowedInside"},
     {"title": "PasDoc_TagManager.TNonSelfTag", "text": "   ", "tags": "", "url": "PasDoc_TagManager.TNonSelfTag.html"},
     {"title": "PasDoc_TagManager.TNonSelfTag.AllowedInside", "text": "  Which means that (assuming that OnAllowedInside is not assigned) this tag is allowed at top level of description and inside parameter of any tag but not within itself and not within tags without toAllowOtherTagsInsideByDefault.  This is currently not used by any tag.    ", "tags": "", "url": "PasDoc_TagManager.TNonSelfTag.html#AllowedInside"},
     {"title": "PasDoc_TagManager.TTagVector", "text": "   ", "tags": "", "url": "PasDoc_TagManager.TTagVector.html"},
     {"title": "PasDoc_TagManager.TTagVector.FindByName", "text": " Returns nil if not found.  Maybe in the future it will use hashlist, for now it's not needed.    ", "tags": "", "url": "PasDoc_TagManager.TTagVector.html#FindByName"},
     {"title": "PasDoc_TagManager.TTagManager", "text": "   ", "tags": "", "url": "PasDoc_TagManager.TTagManager.html"},
     {"title": "PasDoc_TagManager.TTagManager.Create", "text": "    ", "tags": "", "url": "PasDoc_TagManager.TTagManager.html#Create"},
     {"title": "PasDoc_TagManager.TTagManager.Destroy", "text": "    ", "tags": "", "url": "PasDoc_TagManager.TTagManager.html#Destroy"},
     {"title": "PasDoc_TagManager.TTagManager.DoMessage", "text": "    ", "tags": "", "url": "PasDoc_TagManager.TTagManager.html#DoMessage"},
     {"title": "PasDoc_TagManager.TTagManager.DoMessageNonPre", "text": "    ", "tags": "", "url": "PasDoc_TagManager.TTagManager.html#DoMessageNonPre"},
     {"title": "PasDoc_TagManager.TTagManager.Execute", "text": " It expands Description, which means that it processes Description (text supplied by user in some comment in parsed unit) into something ready to be included in output documentation. This means that this handles parsing @-tags, inserting paragraph markers, recognizing URLs in Description and correctly translating it, and translating rest of the &quot;normal&quot; text via ConvertString.  If WantFirstSentenceEnd then we will look for '.' char followed by any whitespace in Description. Moreover, this '.' must be outside of any @-tags parameter. Under FirstSentenceEnd we will return the number of beginning characters in the output string that will include correspong '.' character (note that this definition takes into account that ConvertString may translate '.' into something longer). If no such character exists in Description, FirstSentenceEnd will be set to Length(Result), so the whole Description will be treated as it's first sentence.  If WantFirstSentenceEnd, FirstSentenceEnd will not be set.    ", "tags": "", "url": "PasDoc_TagManager.TTagManager.html#Execute"},
     {"title": "PasDoc_TagManager.TTagManager.Execute", "text": "    ", "tags": "", "url": "PasDoc_TagManager.TTagManager.html#Execute"},
     {"title": "PasDoc_TagManager.TTagManager.CoreExecute", "text": " Use with caution!  If EnclosingTag = nil then this is understood to be toplevel of description, which means that all tags are allowed inside.  If EnclosingTag &lt;&gt; nil then this is not toplevel.  EnclosingTagData returns collected data for given EnclosingTag. You should init it to EnclosingTag.CreateOccurenceData. It will be passed as EnclosingTagData to each of @-tags found inside Description.    ", "tags": "", "url": "PasDoc_TagManager.TTagManager.html#CoreExecute"},
     {"title": "PasDoc_TagManager.TTagManager.CoreExecute", "text": "    ", "tags": "", "url": "PasDoc_TagManager.TTagManager.html#CoreExecute"},
     {"title": "PasDoc_TagManager.TTagManager.OnMessage", "text": "  Note that in this unit we essentialy &quot;don't know&quot; that parsed Description string is probably attached to some TPasItem. It's good that we don't know it (because it makes this class more flexible). But it also means that OnMessage that you assign here may want to add to passed AMessage something like + ' (Expanded_TPasItem_Name)', see e.g. TDocGenerator.DoMessageFromExpandDescription. Maybe in the future we will do some descendant of this class, like TTagManagerForPasItem.   ", "tags": "", "url": "PasDoc_TagManager.TTagManager.html#OnMessage"},
     {"title": "PasDoc_TagManager.TTagManager.Paragraph", "text": " This should specify how paragraphs are marked in particular output format, e.g. html generator may set this to '&lt;p&gt;'.  Default value is ' ' (one space).   ", "tags": "", "url": "PasDoc_TagManager.TTagManager.html#Paragraph"},
     {"title": "PasDoc_TagManager.TTagManager.Space", "text": " This is consistent with [https://github.com/pasdoc/pasdoc/wiki/WritingDocumentation] that clearly says that &quot;amount of whitespace does not matter&quot;.  Although in some pasdoc output formats amount of whitespace also does not matter (e.g. HTML and LaTeX) but in other (e.g. plain text) it matters, so such space compression is needed. In other output formats (no examples yet) it may need to be expressed by something else than simple space, that's why this property is exposed.  Default value is ' ' (one space).   ", "tags": "", "url": "PasDoc_TagManager.TTagManager.html#Space"},
     {"title": "PasDoc_TagManager.TTagManager.ShortDash", "text": " This should produce just a short dash.  Default value is '-'.  You will never get any '-' character to be converted by ConvertString. Convertion of '-' is controlled solely by XxxDash properties of tag manager.      ", "tags": "", "url": "PasDoc_TagManager.TTagManager.html#ShortDash"},
     {"title": "PasDoc_TagManager.TTagManager.EnDash", "text": " This should produce en-dash (as in LaTeX). Default value is '--'.   ", "tags": "", "url": "PasDoc_TagManager.TTagManager.html#EnDash"},
     {"title": "PasDoc_TagManager.TTagManager.EmDash", "text": " This should produce em-dash (as in LaTeX). Default value is '---'.   ", "tags": "", "url": "PasDoc_TagManager.TTagManager.html#EmDash"},
     {"title": "PasDoc_TagManager.TTagManager.URLLink", "text": " Note that passed here URL will not be processed by ConvertString.  This tells what to put in result on URL. If this is not assigned, then ConvertString(URL) will be appended to Result in Execute.   ", "tags": "", "url": "PasDoc_TagManager.TTagManager.html#URLLink"},
     {"title": "PasDoc_TagManager.TTagManager.OnTryAutoLink", "text": " If yes, sets AutoLinked to true and sets QualifiedIdentifierReplacement to a link to QualifiedIdentifier (QualifiedIdentifierReplacement should be ready to be put in final documentation, i.e. already in the final output format). By default AutoLinked is false.   ", "tags": "", "url": "PasDoc_TagManager.TTagManager.html#OnTryAutoLink"},
     {"title": "PasDoc_TagManager.TTagManager.ConvertString", "text": "   ", "tags": "", "url": "PasDoc_TagManager.TTagManager.html#ConvertString"},
     {"title": "PasDoc_TagManager.TTagManager.Abbreviations", "text": "   ", "tags": "", "url": "PasDoc_TagManager.TTagManager.html#Abbreviations"},
     {"title": "PasDoc_TagManager.TTagManager.PreExecute", "text": "   ", "tags": "", "url": "PasDoc_TagManager.TTagManager.html#PreExecute"},
     {"title": "PasDoc_TagManager.TTagManager.Markdown", "text": "   ", "tags": "", "url": "PasDoc_TagManager.TTagManager.html#Markdown"},
     {"title": "PasDoc_TagManager.TTagExecuteEvent", "text": "    ", "tags": "", "url": "PasDoc_TagManager.html#TTagExecuteEvent"},
     {"title": "PasDoc_TagManager.TTagAllowedInsideEvent", "text": "    ", "tags": "", "url": "PasDoc_TagManager.html#TTagAllowedInsideEvent"},
     {"title": "PasDoc_TagManager.TStringConverter", "text": "    ", "tags": "", "url": "PasDoc_TagManager.html#TStringConverter"},
     {"title": "PasDoc_TagManager.TTagOption", "text": "    toParameterRequired This means that tag expects parameters.  If this is not included in TagOptions then tag should not be given any parameters, i.e. TagParameter passed to TTag.Execute should be ''. We will display a warning if user will try to give some parameters for such tag.  toRecursiveTags This means that parameters of this tag will be expanded before passing them to TTag.Execute.  This means that we will expand recursive tags inside parameters, that we will ConvertString inside parameters, that we will handle paragraphs inside parameters etc. &mdash; all that does TTagManager.Execute.  If toParameterRequired is not present in TTagOptions then it's not important whether you included toRecursiveTags.  It's useful for some tags to include toParameterRequired without including toRecursiveTags, e.g. @longcode or @html, that want to get their parameters &quot;verbatim&quot;, not processed.  If toRecursiveTags is not included in tag options: Then everything is allowed within parameter of this tag, but nothing is interpreted. E.g. you can freely use @ char, and even write various @-tags inside @html tag &mdash; this doesn't matter, because @-tags will not be interpreted (they will not be even searched !) inside @html tag. In other words, @ character means literally &quot;@&quot; inside @html, nothing more. The only exception are double @@, @( and @): we still treat them specially, to allow escaping the default parenthesis matching rules. Unless toRecursiveTagsManually is present.  toRecursiveTagsManually Use this, instead of toRecursiveTags, if the implementation of your tag calls (always!) TagManager.CoreExecute on given TagParameter.  This means that your tag is expanded recursively (it handles -tags inside), but you do it manually (instead of allowing toRecursiveTags to do the job). In this case, TagParameter given will be really absolutely unmodified (even the special @@, @( and @) will not be handled), because we know that it will be handled later by special CoreExecute call.  Never use both flags toRecursiveTags and toRecursiveTagsManually.  toAllowOtherTagsInsideByDefault This is meaningful only if toRecursiveTags is included.  Then toAllowOtherTagsInsideByDefault determines are other tags allowed by the default implementation of TTag.AllowedInside.  toAllowNormalTextInside This is meaningful only if toRecursiveTags is included.  Then toAllowNormalTextInside says that normal text is allowed inside parameter of this tag. &quot;Normal text&quot; is anything except other @-tags: normal text, paragraph breaks, various dashes, URLs, and literal @ character (expressed by @@ in descriptions).  If toAllowNormalTextInside will not be included, then normal text (not enclosed within other @-tags) will not be allowed inside. Only whitespace will be allowed, and it will be ignored anyway (i.e. will not be passed to ConvertString, empty line will not produce any Paragraph etc.). This is useful for tags like @orderedList that should only contain other @item tags inside.  toFirstWordVerbatim This is useful for tags like @raises and @param that treat 1st word of their descriptions very specially (where &quot;what exactly is the 1st word&quot; is defined by the ExtractFirstWord function).  This tells pasdoc to leave the beginning of tag parameter (the first word and the eventual whitespace before it) as it is in the parameter. Don't search there for @-tags, URLs, -- or other special dashes, don't insert paragraphs, don't try to auto-link it.  This is meaningful only if toRecursiveTags is included (otherwise the whole tag parameters are always preserved &quot;verbatim&quot;).  TODO: in the future TTagExecuteEvent should just get this &quot;first word&quot; as a separate parameter, separated from TagParameters. Also, this word should not be converted by ConvertString. ", "tags": "", "url": "PasDoc_TagManager.html#TTagOption"},
     {"title": "PasDoc_TagManager.TTagOptions", "text": "   ", "tags": "", "url": "PasDoc_TagManager.html#TTagOptions"},
     {"title": "PasDoc_TagManager.TTryAutoLinkEvent", "text": "    ", "tags": "", "url": "PasDoc_TagManager.html#TTryAutoLinkEvent"},
     {"title": "PasDoc_Tipue", "text": "   ", "tags": "", "url": "PasDoc_Tipue.html"},
     {"title": "PasDoc_Tipue.TipueSearchButtonHead", "text": "    ", "tags": "", "url": "PasDoc_Tipue.html#TipueSearchButtonHead"},
     {"title": "PasDoc_Tipue.TipueSearchButton", "text": " It will make a form with search button. You will need to use Format to insert the localized word for &quot;Search&quot;, e.g.: Format(TipueSearchButton, ['Search']) for English.    ", "tags": "", "url": "PasDoc_Tipue.html#TipueSearchButton"},
     {"title": "PasDoc_Tipue.TipueAddFiles", "text": "  OutputPath is our output path, where html output must be placed. Must end with PathDelim.  Units must be non-nil. It will be used to generate index data for tipue.    ", "tags": "", "url": "PasDoc_Tipue.html#TipueAddFiles"},
     {"title": "PasDoc_Tokenizer", "text": "       The TTokenizer object creates TToken objects (tokens) for the Pascal programming language from a character input stream.  The PasDoc_Scanner unit does the same (it actually uses this unit's tokenizer), with the exception that it evaluates compiler directives, which are comments that start with a dollar sign. Johannes Berg  Ralf Junker (delphi@zeitungsjunge.de) Marco Schmidt (marcoschmidt@geocities.com) Michalis Kamburelis Arno Garrels   Johannes Berg  Ralf Junker (delphi@zeitungsjunge.de) Marco Schmidt (marcoschmidt@geocities.com) Michalis Kamburelis Arno Garrels   Johannes Berg  Ralf Junker (delphi@zeitungsjunge.de) Marco Schmidt (marcoschmidt@geocities.com) Michalis Kamburelis Arno Garrels  ", "tags": "", "url": "PasDoc_Tokenizer.html"},
     {"title": "PasDoc_Tokenizer.TToken", "text": "   ", "tags": "", "url": "PasDoc_Tokenizer.TToken.html"},
     {"title": "PasDoc_Tokenizer.TToken.Data", "text": "   ", "tags": "", "url": "PasDoc_Tokenizer.TToken.html#Data"},
     {"title": "PasDoc_Tokenizer.TToken.MyType", "text": "   ", "tags": "", "url": "PasDoc_Tokenizer.TToken.html#MyType"},
     {"title": "PasDoc_Tokenizer.TToken.Info", "text": "   ", "tags": "", "url": "PasDoc_Tokenizer.TToken.html#Info"},
     {"title": "PasDoc_Tokenizer.TToken.CommentContent", "text": " This is defined only when MyType is in TokenCommentTypes or is TOK_DIRECTIVE. This is the text within the comment without comment delimiters. For TOK_DIRECTIVE you can safely assume that CommentContent[1] = '$'.   ", "tags": "", "url": "PasDoc_Tokenizer.TToken.html#CommentContent"},
     {"title": "PasDoc_Tokenizer.TToken.StringContent", "text": " D only when MyType is TOK_STRING.   ", "tags": "", "url": "PasDoc_Tokenizer.TToken.html#StringContent"},
     {"title": "PasDoc_Tokenizer.TToken.Create", "text": "    ", "tags": "", "url": "PasDoc_Tokenizer.TToken.html#Create"},
     {"title": "PasDoc_Tokenizer.TToken.GetTypeName", "text": "    ", "tags": "", "url": "PasDoc_Tokenizer.TToken.html#GetTypeName"},
     {"title": "PasDoc_Tokenizer.TToken.IsSymbol", "text": "    ", "tags": "", "url": "PasDoc_Tokenizer.TToken.html#IsSymbol"},
     {"title": "PasDoc_Tokenizer.TToken.IsKeyWord", "text": "    ", "tags": "", "url": "PasDoc_Tokenizer.TToken.html#IsKeyWord"},
     {"title": "PasDoc_Tokenizer.TToken.IsStandardDirective", "text": "    ", "tags": "", "url": "PasDoc_Tokenizer.TToken.html#IsStandardDirective"},
     {"title": "PasDoc_Tokenizer.TToken.Description", "text": " Describes MyType and Data (for those tokens that tend to have short Data). Starts with lower letter.    ", "tags": "", "url": "PasDoc_Tokenizer.TToken.html#Description"},
     {"title": "PasDoc_Tokenizer.TToken.StreamName", "text": " It is currently used to set TRawDescriptionInfo.StreamName.   ", "tags": "", "url": "PasDoc_Tokenizer.TToken.html#StreamName"},
     {"title": "PasDoc_Tokenizer.TToken.BeginPosition", "text": " It is currently used to set TRawDescriptionInfo.BeginPosition.   ", "tags": "", "url": "PasDoc_Tokenizer.TToken.html#BeginPosition"},
     {"title": "PasDoc_Tokenizer.TToken.EndPosition", "text": " It is currently used to set TRawDescriptionInfo.EndPosition.   ", "tags": "", "url": "PasDoc_Tokenizer.TToken.html#EndPosition"},
     {"title": "PasDoc_Tokenizer.TTokenizer", "text": "   ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html"},
     {"title": "PasDoc_Tokenizer.TTokenizer.FOnMessage", "text": "   ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#FOnMessage"},
     {"title": "PasDoc_Tokenizer.TTokenizer.FVerbosity", "text": "   ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#FVerbosity"},
     {"title": "PasDoc_Tokenizer.TTokenizer.BufferedChar", "text": "   ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#BufferedChar"},
     {"title": "PasDoc_Tokenizer.TTokenizer.EOS", "text": "   ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#EOS"},
     {"title": "PasDoc_Tokenizer.TTokenizer.IsCharBuffered", "text": "   ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#IsCharBuffered"},
     {"title": "PasDoc_Tokenizer.TTokenizer.Row", "text": "   ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#Row"},
     {"title": "PasDoc_Tokenizer.TTokenizer.Stream", "text": "   ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#Stream"},
     {"title": "PasDoc_Tokenizer.TTokenizer.FStreamName", "text": "   ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#FStreamName"},
     {"title": "PasDoc_Tokenizer.TTokenizer.FStreamPath", "text": "   ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#FStreamPath"},
     {"title": "PasDoc_Tokenizer.TTokenizer.DoError", "text": "    ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#DoError"},
     {"title": "PasDoc_Tokenizer.TTokenizer.DoMessage", "text": "    ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#DoMessage"},
     {"title": "PasDoc_Tokenizer.TTokenizer.CheckForDirective", "text": "    ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#CheckForDirective"},
     {"title": "PasDoc_Tokenizer.TTokenizer.ConsumeChar", "text": "    ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#ConsumeChar"},
     {"title": "PasDoc_Tokenizer.TTokenizer.CreateSymbolToken", "text": "    ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#CreateSymbolToken"},
     {"title": "PasDoc_Tokenizer.TTokenizer.CreateSymbolToken", "text": "    ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#CreateSymbolToken"},
     {"title": "PasDoc_Tokenizer.TTokenizer.GetChar", "text": "    ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#GetChar"},
     {"title": "PasDoc_Tokenizer.TTokenizer.PeekChar", "text": "    ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#PeekChar"},
     {"title": "PasDoc_Tokenizer.TTokenizer.ReadCommentType1", "text": "    ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#ReadCommentType1"},
     {"title": "PasDoc_Tokenizer.TTokenizer.ReadCommentType2", "text": "    ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#ReadCommentType2"},
     {"title": "PasDoc_Tokenizer.TTokenizer.ReadCommentType3", "text": "    ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#ReadCommentType3"},
     {"title": "PasDoc_Tokenizer.TTokenizer.ReadAttAssemblerRegister", "text": "    ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#ReadAttAssemblerRegister"},
     {"title": "PasDoc_Tokenizer.TTokenizer.ReadLiteralString", "text": "    ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#ReadLiteralString"},
     {"title": "PasDoc_Tokenizer.TTokenizer.ReadToken", "text": "    ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#ReadToken"},
     {"title": "PasDoc_Tokenizer.TTokenizer.Create", "text": " Note that AStream will be freed when this object will be freed.    ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#Create"},
     {"title": "PasDoc_Tokenizer.TTokenizer.Destroy", "text": "    ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#Destroy"},
     {"title": "PasDoc_Tokenizer.TTokenizer.HasData", "text": "    ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#HasData"},
     {"title": "PasDoc_Tokenizer.TTokenizer.GetStreamInfo", "text": "    ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#GetStreamInfo"},
     {"title": "PasDoc_Tokenizer.TTokenizer.GetToken", "text": "    ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#GetToken"},
     {"title": "PasDoc_Tokenizer.TTokenizer.UnGetToken", "text": " Also sets T to Nil, to prevent you from freeing it accidentally.  You cannot have more than one &quot;unget&quot; token. If you only call UnGetToken after some GetToken, you are safe.    ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#UnGetToken"},
     {"title": "PasDoc_Tokenizer.TTokenizer.SkipUntilCompilerDirective", "text": " Returns either Nil or a token with MyType = TOK_DIRECTIVE.    ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#SkipUntilCompilerDirective"},
     {"title": "PasDoc_Tokenizer.TTokenizer.OnMessage", "text": "   ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#OnMessage"},
     {"title": "PasDoc_Tokenizer.TTokenizer.Verbosity", "text": "   ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#Verbosity"},
     {"title": "PasDoc_Tokenizer.TTokenizer.StreamName", "text": "   ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#StreamName"},
     {"title": "PasDoc_Tokenizer.TTokenizer.StreamPath", "text": "  It may be an absolute path or a relative path. Relative paths are always resolved vs pasdoc current directory. This way user can give relative paths in command-line when writing Pascal source filenames to parse.  In particular, this may be '' to indicate current dir.  It's always specified like it was processed by IncludeTrailingPathDelimiter, so it has trailing PathDelim included (unless it was '', in which case it remains empty).   ", "tags": "", "url": "PasDoc_Tokenizer.TTokenizer.html#StreamPath"},
     {"title": "PasDoc_Tokenizer.TOKEN_TYPE_NAMES", "text": " All start with lower letter. They should somehow describe (in a few short words) given TTokenType.   ", "tags": "", "url": "PasDoc_Tokenizer.html#TOKEN_TYPE_NAMES"},
     {"title": "PasDoc_Tokenizer.TokenCommentTypes", "text": "   ", "tags": "", "url": "PasDoc_Tokenizer.html#TokenCommentTypes"},
     {"title": "PasDoc_Tokenizer.SymbolNames", "text": " They can be useful to have some mapping TSymbolType -&gt; string, but remember that actually some symbols in tokenizer have multiple possible representations, e.g. &quot;right bracket&quot; is usually given as &quot;]&quot; but can also be written as &quot;.)&quot;.   ", "tags": "", "url": "PasDoc_Tokenizer.html#SymbolNames"},
     {"title": "PasDoc_Tokenizer.KeyWordArray", "text": "   ", "tags": "", "url": "PasDoc_Tokenizer.html#KeyWordArray"},
     {"title": "PasDoc_Tokenizer.StandardDirectiveArray", "text": "   ", "tags": "", "url": "PasDoc_Tokenizer.html#StandardDirectiveArray"},
     {"title": "PasDoc_Tokenizer.StandardDirectiveByName", "text": " Returns SD_INVALIDSTANDARDDIRECTIVE if not.    ", "tags": "", "url": "PasDoc_Tokenizer.html#StandardDirectiveByName"},
     {"title": "PasDoc_Tokenizer.KeyWordByName", "text": " Returns KEY_INVALIDKEYWORD if not.    ", "tags": "", "url": "PasDoc_Tokenizer.html#KeyWordByName"},
     {"title": "PasDoc_Tokenizer.TTokenType", "text": "  TOK_DIRECTIVE is a compiler directive (like $ifdef, $define).  Note that tokenizer is not able to tell whether you used standard directive (e.g. 'Register') as an identifier (e.g. you're declaring procedure named 'Register') or as a real standard directive (e.g. a calling specifier 'register'). So there is no value like TOK_STANDARD_DIRECTIVE here, standard directives are always reported as TOK_IDENTIFIER. You can check TToken.Info.StandardDirective to know whether this identifier is maybe used as real standard directive.    TOK_WHITESPACE    TOK_COMMENT_PAS    TOK_COMMENT_EXT    TOK_COMMENT_HELPINSIGHT    TOK_COMMENT_CSTYLE    TOK_IDENTIFIER    TOK_NUMBER    TOK_STRING    TOK_SYMBOL    TOK_DIRECTIVE    TOK_KEYWORD    TOK_ATT_ASSEMBLER_REGISTER   ", "tags": "", "url": "PasDoc_Tokenizer.html#TTokenType"},
     {"title": "PasDoc_Tokenizer.TKeyword", "text": "    KEY_INVALIDKEYWORD    KEY_AND    KEY_ARRAY    KEY_AS    KEY_ASM    KEY_BEGIN    KEY_CASE    KEY_CLASS    KEY_CONST    KEY_CONSTRUCTOR    KEY_DESTRUCTOR    KEY_DISPINTERFACE    KEY_DIV    KEY_DO    KEY_DOWNTO    KEY_ELSE    KEY_END    KEY_EXCEPT    KEY_EXPORTS    KEY_FILE    KEY_FINALIZATION    KEY_FINALLY    KEY_FOR    KEY_FUNCTION    KEY_GOTO    KEY_IF    KEY_IMPLEMENTATION    KEY_IN    KEY_INHERITED    KEY_INITIALIZATION    KEY_INLINE    KEY_INTERFACE    KEY_IS    KEY_LABEL    KEY_LIBRARY    KEY_MOD    KEY_NIL    KEY_NOT    KEY_OBJECT    KEY_OF    KEY_ON    KEY_OR    KEY_PACKED    KEY_PROCEDURE    KEY_PROGRAM    KEY_PROPERTY    KEY_RAISE    KEY_RECORD    KEY_REPEAT    KEY_RESOURCESTRING    KEY_SET    KEY_SHL    KEY_SHR    KEY_STRING    KEY_THEN    KEY_THREADVAR    KEY_TO    KEY_TRY    KEY_TYPE    KEY_UNIT    KEY_UNTIL    KEY_USES    KEY_VAR    KEY_WHILE    KEY_WITH    KEY_XOR   ", "tags": "", "url": "PasDoc_Tokenizer.html#TKeyword"},
     {"title": "PasDoc_Tokenizer.TStandardDirective", "text": "    SD_INVALIDSTANDARDDIRECTIVE    SD_ABSOLUTE    SD_ABSTRACT    SD_APIENTRY    SD_ASSEMBLER    SD_AUTOMATED    SD_CDECL    SD_CVAR    SD_DEFAULT    SD_DISPID    SD_DYNAMIC    SD_EXPERIMENTAL    SD_EXPORT    SD_EXTERNAL    SD_FAR    SD_FORWARD    SD_GENERIC    SD_HELPER    SD_INDEX    SD_INLINE    SD_MESSAGE    SD_NAME    SD_NEAR    SD_NODEFAULT    SD_OPERATOR    SD_OUT    SD_OVERLOAD    SD_OVERRIDE    SD_PASCAL    SD_PRIVATE    SD_PROTECTED    SD_PUBLIC    SD_PUBLISHED    SD_READ    SD_REFERENCE    SD_REGISTER    SD_REINTRODUCE    SD_RESIDENT    SD_SEALED    SD_SPECIALIZE    SD_STATIC    SD_STDCALL    SD_STORED    SD_STRICT    SD_VIRTUAL    SD_WRITE    SD_DEPRECATED    SD_SAFECALL    SD_PLATFORM    SD_VARARGS    SD_FINAL   ", "tags": "", "url": "PasDoc_Tokenizer.html#TStandardDirective"},
     {"title": "PasDoc_Tokenizer.TStandardDirectives", "text": "   ", "tags": "", "url": "PasDoc_Tokenizer.html#TStandardDirectives"},
     {"title": "PasDoc_Tokenizer.TSymbolType", "text": "    SYM_PLUS    SYM_MINUS    SYM_ASTERISK    SYM_SLASH    SYM_EQUAL    SYM_LESS_THAN    SYM_LESS_THAN_EQUAL    SYM_GREATER_THAN    SYM_GREATER_THAN_EQUAL    SYM_LEFT_BRACKET    SYM_RIGHT_BRACKET    SYM_COMMA    SYM_LEFT_PARENTHESIS    SYM_RIGHT_PARENTHESIS    SYM_COLON    SYM_SEMICOLON    SYM_DEREFERENCE    SYM_PERIOD    SYM_AT    SYM_DOLLAR    SYM_ASSIGN    SYM_RANGE    SYM_POWER    SYM_BACKSLASH SYM_BACKSLASH may occur when writing char constant &quot;&circ;\\&quot;, see ../../tests/ok_caret_character.pas  ", "tags": "", "url": "PasDoc_Tokenizer.html#TSymbolType"},
     {"title": "PasDoc_Types", "text": "    Johannes Berg  Michalis Kamburelis Arno Garrels   Johannes Berg  Michalis Kamburelis Arno Garrels   Johannes Berg  Michalis Kamburelis Arno Garrels  ", "tags": "", "url": "PasDoc_Types.html"},
     {"title": "PasDoc_Types.EPasDoc", "text": "   ", "tags": "", "url": "PasDoc_Types.EPasDoc.html"},
     {"title": "PasDoc_Types.EPasDoc.Create", "text": "    ", "tags": "", "url": "PasDoc_Types.EPasDoc.html#Create"},
     {"title": "PasDoc_Types.MaxNameParts", "text": "   ", "tags": "", "url": "PasDoc_Types.html#MaxNameParts"},
     {"title": "PasDoc_Types.CP_UTF16", "text": "   ", "tags": "", "url": "PasDoc_Types.html#CP_UTF16"},
     {"title": "PasDoc_Types.CP_UTF16Be", "text": "   ", "tags": "", "url": "PasDoc_Types.html#CP_UTF16Be"},
     {"title": "PasDoc_Types.CP_UTF32", "text": "   ", "tags": "", "url": "PasDoc_Types.html#CP_UTF32"},
     {"title": "PasDoc_Types.CP_UTF32Be", "text": "   ", "tags": "", "url": "PasDoc_Types.html#CP_UTF32Be"},
     {"title": "PasDoc_Types.SplitNameParts", "text": " If S is not a valid identifier, False is returned, otherwise True is returned and splitted name is returned as NameParts.    ", "tags": "", "url": "PasDoc_Types.html#SplitNameParts"},
     {"title": "PasDoc_Types.OneNamePart", "text": "    ", "tags": "", "url": "PasDoc_Types.html#OneNamePart"},
     {"title": "PasDoc_Types.GlueNameParts", "text": "    ", "tags": "", "url": "PasDoc_Types.html#GlueNameParts"},
     {"title": "PasDoc_Types.TBytes", "text": "   ", "tags": "", "url": "PasDoc_Types.html#TBytes"},
     {"title": "PasDoc_Types.UnicodeString", "text": "   ", "tags": "", "url": "PasDoc_Types.html#UnicodeString"},
     {"title": "PasDoc_Types.RawByteString", "text": "   ", "tags": "", "url": "PasDoc_Types.html#RawByteString"},
     {"title": "PasDoc_Types.TStringArray", "text": "   ", "tags": "", "url": "PasDoc_Types.html#TStringArray"},
     {"title": "PasDoc_Types.TNameParts", "text": "  User supplies such name by separating each part with dot, e.g. 'UnitName.ClassName.ProcedureName', then SplitNameParts converts it to TNameParts like ['UnitName', 'ClassName', 'ProcedureName']. Length must be always between 1 and MaxNameParts.   ", "tags": "", "url": "PasDoc_Types.html#TNameParts"},
     {"title": "PasDoc_Types.TPasDocMessageType", "text": "    pmtPlainText    pmtInformation    pmtWarning    pmtError   ", "tags": "", "url": "PasDoc_Types.html#TPasDocMessageType"},
     {"title": "PasDoc_Types.TPasDocMessageEvent", "text": "    ", "tags": "", "url": "PasDoc_Types.html#TPasDocMessageEvent"},
     {"title": "PasDoc_Types.TCharSet", "text": "   ", "tags": "", "url": "PasDoc_Types.html#TCharSet"},
     {"title": "PasDoc_Types.TImplicitVisibility", "text": "    ivPublic    ivPublished    ivImplicit   ", "tags": "", "url": "PasDoc_Types.html#TImplicitVisibility"},
     {"title": "PasDoc_Utils", "text": "    Johannes Berg  Michalis Kamburelis Arno Garrels   Johannes Berg  Michalis Kamburelis Arno Garrels   Johannes Berg  Michalis Kamburelis Arno Garrels  ", "tags": "", "url": "PasDoc_Utils.html"},
     {"title": "PasDoc_Utils.TCharReplacement", "text": "   ", "tags": "", "url": "PasDoc_Utils.TCharReplacement.html"},
     {"title": "PasDoc_Utils.TCharReplacement.cChar", "text": "   ", "tags": "", "url": "PasDoc_Utils.TCharReplacement.html#cChar"},
     {"title": "PasDoc_Utils.TCharReplacement.sSpec", "text": "   ", "tags": "", "url": "PasDoc_Utils.TCharReplacement.html#sSpec"},
     {"title": "PasDoc_Utils.AllChars", "text": "   ", "tags": "", "url": "PasDoc_Utils.html#AllChars"},
     {"title": "PasDoc_Utils.WhiteSpaceNotNL", "text": "   ", "tags": "", "url": "PasDoc_Utils.html#WhiteSpaceNotNL"},
     {"title": "PasDoc_Utils.WhiteSpaceNL", "text": "   ", "tags": "", "url": "PasDoc_Utils.html#WhiteSpaceNL"},
     {"title": "PasDoc_Utils.WhiteSpace", "text": "   ", "tags": "", "url": "PasDoc_Utils.html#WhiteSpace"},
     {"title": "PasDoc_Utils.FlagStartSigns", "text": "   ", "tags": "", "url": "PasDoc_Utils.html#FlagStartSigns"},
     {"title": "PasDoc_Utils.FlagEndSigns", "text": "   ", "tags": "", "url": "PasDoc_Utils.html#FlagEndSigns"},
     {"title": "PasDoc_Utils.IsStrEmptyA", "text": "    ", "tags": "", "url": "PasDoc_Utils.html#IsStrEmptyA"},
     {"title": "PasDoc_Utils.StrCountCharA", "text": "    ", "tags": "", "url": "PasDoc_Utils.html#StrCountCharA"},
     {"title": "PasDoc_Utils.StrPosIA", "text": " Return 0 if not found    ", "tags": "", "url": "PasDoc_Utils.html#StrPosIA"},
     {"title": "PasDoc_Utils.MakeMethod", "text": "    ", "tags": "", "url": "PasDoc_Utils.html#MakeMethod"},
     {"title": "PasDoc_Utils.StringReplaceChars", "text": "    ", "tags": "", "url": "PasDoc_Utils.html#StringReplaceChars"},
     {"title": "PasDoc_Utils.SCharIs", "text": "    ", "tags": "", "url": "PasDoc_Utils.html#SCharIs"},
     {"title": "PasDoc_Utils.SCharIs", "text": "    ", "tags": "", "url": "PasDoc_Utils.html#SCharIs"},
     {"title": "PasDoc_Utils.ExtractFirstWord", "text": "  If there is no white-space in S (or there is white-space only at the beginning of S, in which case it is ignored) then the whole S is regarded as it's first word.  Both S and result are trimmed, i.e. they don't have any excessive white-space at the beginning or end.    ", "tags": "", "url": "PasDoc_Utils.html#ExtractFirstWord"},
     {"title": "PasDoc_Utils.ExtractFirstWord", "text": "  Splits S by it's first white-space (ignoring white-space at the very beginning of the string). No such white-space means that whole S is regarded as the FirstWord.  Both FirstWord and Rest are trimmed.    ", "tags": "", "url": "PasDoc_Utils.html#ExtractFirstWord"},
     {"title": "PasDoc_Utils.FileToString", "text": "    ", "tags": "", "url": "PasDoc_Utils.html#FileToString"},
     {"title": "PasDoc_Utils.StringToFile", "text": "    ", "tags": "", "url": "PasDoc_Utils.html#StringToFile"},
     {"title": "PasDoc_Utils.DataToFile", "text": "    ", "tags": "", "url": "PasDoc_Utils.html#DataToFile"},
     {"title": "PasDoc_Utils.SCharsReplace", "text": "    ", "tags": "", "url": "PasDoc_Utils.html#SCharsReplace"},
     {"title": "PasDoc_Utils.CopyFile", "text": "    ", "tags": "", "url": "PasDoc_Utils.html#CopyFile"},
     {"title": "PasDoc_Utils.IsPrefix", "text": " Not case-sensitive.    ", "tags": "", "url": "PasDoc_Utils.html#IsPrefix"},
     {"title": "PasDoc_Utils.RemovePrefix", "text": "    ", "tags": "", "url": "PasDoc_Utils.html#RemovePrefix"},
     {"title": "PasDoc_Utils.SEnding", "text": " Returns '' if P &gt; length(S). Yes, this is simply equivalent to Copy(S, P, MaxInt).    ", "tags": "", "url": "PasDoc_Utils.html#SEnding"},
     {"title": "PasDoc_Utils.IsPathAbsolute", "text": "  Path may point to directory or normal file, it doesn't matter. Also it doesn't matter whether Path ends with PathDelim or not.  Note for Windows: while it's obvious that 'c:\\autoexec.bat' is an absolute path, and 'autoexec.bat' is not, there's a question whether path like '\\autoexec.bat' is absolute? It doesn't specify drive letter, but it does specify full directory hierarchy on some drive. This function treats this as not absolute, on the reasoning that &quot;not all information is contained in Path&quot;.      ", "tags": "", "url": "PasDoc_Utils.html#IsPathAbsolute"},
     {"title": "PasDoc_Utils.IsPathAbsoluteOnDrive", "text": "      ", "tags": "", "url": "PasDoc_Utils.html#IsPathAbsoluteOnDrive"},
     {"title": "PasDoc_Utils.CombinePaths", "text": " BasePath MUST be an absolute path, on Windows it must contain at least drive specifier (like 'c:'), on Unix it must begin with &quot;/&quot;. RelPath can be relative and can be absolute. If RelPath is absolute, result is RelPath. Else the result is an absolute path calculated by combining RelPath with BasePath.    ", "tags": "", "url": "PasDoc_Utils.html#CombinePaths"},
     {"title": "PasDoc_Utils.DeleteFileExt", "text": " Note that if the FileName had a couple of extensions (e.g. blah.x3d.gz) this will remove only the last one. Will remove nothing if filename has no extension.    ", "tags": "", "url": "PasDoc_Utils.html#DeleteFileExt"},
     {"title": "PasDoc_Utils.RemoveIndentation", "text": "    ", "tags": "", "url": "PasDoc_Utils.html#RemoveIndentation"},
     {"title": "PasDoc_Utils.Swap16Buf", "text": "    ", "tags": "", "url": "PasDoc_Utils.html#Swap16Buf"},
     {"title": "PasDoc_Utils.IsCharInSet", "text": "    ", "tags": "", "url": "PasDoc_Utils.html#IsCharInSet"},
     {"title": "PasDoc_Utils.IsCharInSet", "text": "    ", "tags": "", "url": "PasDoc_Utils.html#IsCharInSet"},
     {"title": "PasDoc_Utils.IsUtf8LeadByte", "text": "    ", "tags": "", "url": "PasDoc_Utils.html#IsUtf8LeadByte"},
     {"title": "PasDoc_Utils.IsUtf8TrailByte", "text": "    ", "tags": "", "url": "PasDoc_Utils.html#IsUtf8TrailByte"},
     {"title": "PasDoc_Utils.Utf8Size", "text": "    ", "tags": "", "url": "PasDoc_Utils.html#Utf8Size"},
     {"title": "PasDoc_Utils.IsLeadChar", "text": "    ", "tags": "", "url": "PasDoc_Utils.html#IsLeadChar"},
     {"title": "PasDoc_Utils.StripHtml", "text": "  Assumes that the HTML content is correct (all elements are nicely closed, all &lt; &gt; inside attributes are escaped to &amp;lt; &amp;gt;, all &lt; &gt; outside elements are escaped to &amp;lt; &amp;gt;). It doesn't try very hard to deal with incorrect HTML context (it will not crash, but results are undefined). It's designed to strip HTML from PasDoc-generated HTML, which should always be correct.    ", "tags": "", "url": "PasDoc_Utils.html#StripHtml"},
     {"title": "PasDoc_Utils.SAppendPart", "text": "    ", "tags": "", "url": "PasDoc_Utils.html#SAppendPart"},
     {"title": "PasDoc_Versions", "text": "   ", "tags": "", "url": "PasDoc_Versions.html"},
     {"title": "PasDoc_Versions.COMPILER_BITS", "text": "   ", "tags": "", "url": "PasDoc_Versions.html#COMPILER_BITS"},
     {"title": "PasDoc_Versions.PASDOC_NAME", "text": "   ", "tags": "", "url": "PasDoc_Versions.html#PASDOC_NAME"},
     {"title": "PasDoc_Versions.PASDOC_DATE", "text": "  We used to have this constant set to CVS/SVN $ Date keyword, but:      That's not a really correct indication of pasdoc release. $ Date is only the date when this file, PasDoc_Base.pas, was last modified.  As it happens, always when you make an official release you have to manually change PASDOC_VERSION constant in this file below. So PASDOC_DATE was (at the time when the official release was made) updated to current date. But, since you have to change PASDOC_VERSION constant manually anyway, then it's not much of a problem to also update PASDOC_DATE manually.  For unofficial releases (i.e. when pasdoc is simply compiled from SVN by anyone, or when it's packaged for [https://github.com/pasdoc/pasdoc/wiki/DevelopmentSnapshots]), PASDOC_DATE has no clear meaning. It's not the date of this release (since you don't update the PASDOC_VERSION constant) and it's not the date of last official release (since some commits possibly happened to PasDoc_Base.pas since last release).    SVN makes this date look bad for the purpose of PASDOC_FULL_INFO. It's too long: contains the time, day of the week, and a descriptive version. Like   2006-11-15 07:12:34 +0100 (Wed, 15 Nov 2006)    Moreover, it contains indication of local user's system time, and the words (day of the week and month's name) are localized. So it depends on the locale developer has set (you can avoid localization of the words by doing things like export LANG=C before SVN operations, but it's too error-prone).       ", "tags": "", "url": "PasDoc_Versions.html#PASDOC_DATE"},
     {"title": "PasDoc_Versions.PASDOC_VERSION", "text": "   ", "tags": "", "url": "PasDoc_Versions.html#PASDOC_VERSION"},
     {"title": "PasDoc_Versions.PASDOC_NAME_AND_VERSION", "text": "   ", "tags": "", "url": "PasDoc_Versions.html#PASDOC_NAME_AND_VERSION"},
     {"title": "PasDoc_Versions.PASDOC_HOMEPAGE", "text": "   ", "tags": "", "url": "PasDoc_Versions.html#PASDOC_HOMEPAGE"},
     {"title": "PasDoc_Versions.COMPILER_NAME", "text": " This is a function only because we can't nicely declare it as a constant. But this behaves like a constant, i.e. every time you call it it returns the same thing (as long as this is the same binary).    ", "tags": "", "url": "PasDoc_Versions.html#COMPILER_NAME"},
     {"title": "PasDoc_Versions.PASDOC_FULL_INFO", "text": "  This is a function only because we can't nicely declare it as a constant. But this behaves like a constant, i.e. every time you call it it returns the same thing (as long as this is the same binary).    ", "tags": "", "url": "PasDoc_Versions.html#PASDOC_FULL_INFO"}
]};
